{"ast":null,"code":"import _objectSpread from \"/Users/zhengjie/Documents/Fulltime/nba_app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/zhengjie/Documents/Fulltime/nba_app/src/components/Dashboard/dashboard.js\";\nimport React, { Component } from 'react';\nimport FormField from '../widgets/FormFields/formFields';\nimport styles from './dashboard.module.css';\nimport { firebaseTeams, firebaseLooper } from '../../firebase';\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertFromRaw, convertToRaw } from 'draft-js';\nimport { stateToHTML } from 'draft-js-export-html';\nimport Uploader from '../widgets/fileUploader/fileUploader';\n\nclass Dashboard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      editorState: EditorState.createEmpty(),\n      postError: '',\n      loading: false,\n      formdata: {\n        author: {\n          element: 'input',\n          value: '',\n          config: {\n            name: 'author_input',\n            type: 'text',\n            placeholder: 'Enter Your Name'\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false,\n          validationMessage: ''\n        },\n        title: {\n          element: 'input',\n          value: '',\n          config: {\n            name: 'title_input',\n            type: 'text',\n            placeholder: 'Enter Your Title'\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false,\n          validationMessage: ''\n        },\n        body: {\n          element: 'texteditor',\n          value: '',\n          valid: true\n        },\n        team: {\n          element: 'select',\n          value: '',\n          config: {\n            name: 'team_input',\n            options: []\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false,\n          validationMessage: ''\n        }\n      }\n    };\n\n    this.loadTeams = () => {\n      firebaseTeams.once('value').then(snapshot => {\n        let teams = [];\n        snapshot.forEach(childSnapshot => {\n          teams.push({\n            id: childSnapshot.val().teamId,\n            name: childSnapshot.val().city\n          });\n        });\n\n        const newFormdata = _objectSpread({}, this.state.formdata);\n\n        const newElement = _objectSpread({}, newFormdata['team']);\n\n        newElement.config.options = teams;\n        newFormdata['team'] = newElement;\n        this.setState({\n          formdata: newFormdata\n        });\n      });\n    };\n\n    this.updateForm = (element, content = '') => {\n      const newFormdata = _objectSpread({}, this.state.formdata);\n\n      const newElement = _objectSpread({}, newFormdata[element.id]);\n\n      if (content === '') {\n        newElement.value = element.event.target.value;\n      } else {\n        newElement.value = content;\n      }\n\n      if (element.blur) {\n        let validData = this.validate(newElement);\n        newElement.valid = validData[0];\n        newElement.validationMessage = validData[1];\n      }\n\n      newElement.touched = element.blur;\n      newFormdata[element.id] = newElement;\n      this.setState({\n        formdata: newFormdata\n      });\n    };\n\n    this.validate = element => {\n      let error = [true, ''];\n\n      if (element.validation.required) {\n        const valid = element.value.trim() !== '';\n        const message = `${!valid ? 'This field is required' : ''}`;\n        error = !valid ? [valid, message] : error;\n      }\n\n      return error;\n    };\n\n    this.submitForm = event => {\n      event.preventDefault();\n      let dataToSubmit = {};\n      let formIsValid = true;\n\n      for (let key in this.state.formdata) {\n        dataToSubmit[key] = this.state.formdata[key].value;\n      }\n\n      for (let key in this.state.formdata) {\n        formIsValid = this.state.formdata[key].valid && formIsValid;\n      }\n\n      console.log(dataToSubmit);\n\n      if (formIsValid) {\n        console.log('submit');\n      } else {\n        this.setState({\n          postError: 'Something went wrong'\n        });\n      }\n    };\n\n    this.submitButton = () => this.state.loading ? 'loading' : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"Add Post\"));\n\n    this.showError = () => this.state.postError !== '' ? React.createElement(\"div\", {\n      className: styles.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, this.state.postError) : '';\n\n    this.onEditorStateChange = editorState => {\n      let contentState = editorState.getCurrentContent();\n      let rawState = convertToRaw(contentState);\n      let html = stateToHTML(contentState);\n      this.updateForm({\n        id: 'body'\n      }, html);\n      this.setState({\n        editorState\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.loadTeams();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: styles.postContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.submitForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"Add Post\"), React.createElement(Uploader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), React.createElement(FormField, {\n      id: 'author',\n      formdata: this.state.formdata.author,\n      change: element => this.updateForm(element),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }), React.createElement(FormField, {\n      id: 'title',\n      formdata: this.state.formdata.title,\n      change: element => this.updateForm(element),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }), React.createElement(Editor, {\n      editorState: this.state.editorState,\n      wrapperClassName: \"myEditor-wrapper\",\n      editorClassName: \"myEditor-editor\",\n      onEditorStateChange: this.onEditorStateChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }), React.createElement(FormField, {\n      id: 'team',\n      formdata: this.state.formdata.team,\n      change: element => this.updateForm(element),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }), this.submitButton(), this.showError()));\n  }\n\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/zhengjie/Documents/Fulltime/nba_app/src/components/Dashboard/dashboard.js"],"names":["React","Component","FormField","styles","firebaseTeams","firebaseLooper","Editor","EditorState","convertFromRaw","convertToRaw","stateToHTML","Uploader","Dashboard","state","editorState","createEmpty","postError","loading","formdata","author","element","value","config","name","type","placeholder","validation","required","valid","touched","validationMessage","title","body","team","options","loadTeams","once","then","snapshot","teams","forEach","childSnapshot","push","id","val","teamId","city","newFormdata","newElement","setState","updateForm","content","event","target","blur","validData","validate","error","trim","message","submitForm","preventDefault","dataToSubmit","formIsValid","key","console","log","submitButton","showError","onEditorStateChange","contentState","getCurrentContent","rawState","html","componentDidMount","render","postContainer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport FormField from '../widgets/FormFields/formFields';\nimport styles from './dashboard.module.css';\nimport { firebaseTeams, firebaseLooper } from '../../firebase';\n\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertFromRaw, convertToRaw } from 'draft-js';\nimport { stateToHTML } from 'draft-js-export-html';\nimport Uploader from '../widgets/fileUploader/fileUploader';\n\nclass Dashboard extends Component{\n\n    state={\n        editorState: EditorState.createEmpty(),\n        postError:'',\n        loading:false,\n        formdata:{\n            author:{\n                element:'input',\n                value:'',\n                config:{\n                    name:'author_input',\n                    type:'text',\n                    placeholder:'Enter Your Name'\n                },\n                validation:{\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n                validationMessage:''\n            },\n            title:{\n                element:'input',\n                value:'',\n                config:{\n                    name:'title_input',\n                    type:'text',\n                    placeholder:'Enter Your Title'\n                },\n                validation:{\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n                validationMessage:''\n            }, \n            body:{\n                element:'texteditor',\n                value:'',\n                valid:true\n            },\n            team:{\n                element:'select',\n                value:'',\n                config:{\n                    name:'team_input',\n                    options:[]\n                },\n                validation:{\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n                validationMessage:''\n            } \n        }\n    }\n\n    componentDidMount(){\n        this.loadTeams()\n    }\n\n    loadTeams = () => {\n        firebaseTeams.once('value')\n        .then((snapshot) =>{\n            let teams = [];\n            snapshot.forEach((childSnapshot) => {\n                teams.push({\n                    id: childSnapshot.val().teamId,\n                    name: childSnapshot.val().city\n                })\n            })\n\n            const newFormdata = {...this.state.formdata};\n            const newElement = {...newFormdata['team']};\n            newElement.config.options = teams;\n            newFormdata['team'] = newElement;\n            this.setState({\n                formdata: newFormdata\n            })\n        })\n    }\n\n    updateForm = (element, content = '') => {\n        const  newFormdata = {\n            ...this.state.formdata\n        }\n        const newElement = {\n            ...newFormdata[element.id]\n        }\n\n        if(content === ''){\n            newElement.value = element.event.target.value;\n        }else{\n            newElement.value = content\n        }\n        \n        if(element.blur){\n            let validData = this.validate(newElement);\n            newElement.valid = validData[0];\n            newElement.validationMessage = validData[1];\n        }\n        newElement.touched = element.blur;\n        newFormdata[element.id] = newElement;\n        this.setState({\n            formdata: newFormdata\n        })\n    }\n\n    validate = (element) => {\n        let error = [true, ''];\n\n        if(element.validation.required){\n            const valid = element.value.trim() !=='';\n            const message = `${!valid ? 'This field is required' : ''}`;\n            error = !valid ? [valid, message] : error\n        }\n        return error;\n    }\n\n\n    submitForm = (event) => {\n        event.preventDefault();\n        let dataToSubmit = {};\n        let formIsValid = true;\n        for(let key  in this.state.formdata){\n            dataToSubmit[key] = this.state.formdata[key].value\n        }\n\n        for(let key in this.state.formdata){\n            formIsValid = this.state.formdata[key].valid && formIsValid;\n        }\n\n        console.log(dataToSubmit)\n\n        if(formIsValid){\n            console.log('submit');\n        }else{\n            this.setState({\n                postError: 'Something went wrong'\n            })\n        }\n\n    }\n\n    submitButton = () => (\n        this.state.loading ?\n            'loading'\n        :\n        <div>\n            <button type=\"submit\">Add Post</button>\n        </div>\n    )\n    \n    showError = () => (\n        this.state.postError !== '' ?\n        <div className={styles.error}>{this.state.postError}</div>\n        : ''\n    )\n    \n    onEditorStateChange = (editorState) =>{\n        \n        let contentState = editorState.getCurrentContent();\n        let rawState = convertToRaw(contentState);\n        let html = stateToHTML(contentState)\n        this.updateForm({id:'body'},html)\n        this.setState({\n            editorState\n        })\n    }\n    render(){\n        return(\n            <div className = {styles.postContainer}>\n                <form onSubmit={this.submitForm}>\n                    <h2>Add Post</h2>\n\n                    <Uploader/>\n\n                    <FormField\n                        id={'author'}\n                        formdata={this.state.formdata.author}\n                        change={(element) => this.updateForm(element)}\n                    />\n                    <FormField\n                        id={'title'}\n                        formdata={this.state.formdata.title}\n                        change={(element) => this.updateForm(element)}\n                    />\n\n                    <Editor\n                        editorState={this.state.editorState}\n                        wrapperClassName=\"myEditor-wrapper\"\n                        editorClassName=\"myEditor-editor\"\n                        onEditorStateChange={this.onEditorStateChange}\n                    />\n\n                    <FormField\n                        id={'team'}\n                        formdata={this.state.formdata.team}\n                        change={(element) => this.updateForm(element)}\n                    />\n\n                    { this.submitButton() }\n                    { this.showError()}\n                </form>     \n            </div>\n        )\n    }\n}\n\nexport default Dashboard; "]},"metadata":{},"sourceType":"module"}