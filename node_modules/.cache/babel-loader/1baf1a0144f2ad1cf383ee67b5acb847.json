{"ast":null,"code":"import _objectSpread from \"/Users/zhengjie/Documents/Fulltime/nba_app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/zhengjie/Documents/Fulltime/nba_app/src/components/Dashboard/dashboard.js\";\nimport React, { Component } from 'react';\nimport FormField from '../widgets/FormFields/formFields';\nimport styles from './dashboard.module.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertFromRaw, convertToRaw } from 'draft-js';\nimport { stateToHTML } from 'draft-js-export-html';\n\nclass Dashboard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      postError: '',\n      loading: false,\n      formdata: {\n        author: {\n          element: 'input',\n          value: '',\n          config: {\n            name: 'author_input',\n            type: 'text',\n            placeholder: 'Enter Your Name'\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false,\n          validationMessage: ''\n        },\n        title: {\n          element: 'input',\n          value: '',\n          config: {\n            name: 'title_input',\n            type: 'text',\n            placeholder: 'Enter Your Title'\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false,\n          validationMessage: ''\n        }\n      }\n    };\n\n    this.updateForm = element => {\n      const newFormdata = _objectSpread({}, this.state.formdata);\n\n      const newElement = _objectSpread({}, newFormdata[element.id]);\n\n      newElement.value = element.event.target.value;\n\n      if (element.blur) {\n        let validData = this.validate(newElement);\n        newElement.valid = validData[0];\n        newElement.validationMessage = validData[1];\n      }\n\n      newElement.touched = element.blur;\n      newFormdata[element.id] = newElement;\n      this.setState({\n        formdata: newFormdata\n      });\n    };\n\n    this.validate = element => {\n      let error = [true, ''];\n\n      if (element.validation.required) {\n        const valid = element.value.trim() !== '';\n        const message = `${!valid ? 'This field is required' : ''}`;\n        error = !valid ? [valid, message] : error;\n      }\n\n      return error;\n    };\n\n    this.submitForm = event => {\n      event.preventDefault();\n      let dataToSubmit = {};\n      let formIsValid = true;\n\n      for (let key in this.state.formdata) {\n        dataToSubmit[key] = this.state.formdata[key].value;\n      }\n\n      for (let key in this.state.formdata) {\n        formIsValid = this.state.formdata[key].valid && formIsValid;\n      }\n\n      console.log(dataToSubmit);\n\n      if (formIsValid) {\n        console.log('submit');\n      } else {\n        this.setState({\n          postError: 'Something went wrong'\n        });\n      }\n    };\n\n    this.submitButton = () => this.state.loading ? 'loading' : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Add Post\"));\n\n    this.showError = () => this.state.postError !== '' ? React.createElement(\"div\", {\n      className: styles.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, this.state.postError) : '';\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: styles.postContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.submitForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Add Post\"), React.createElement(FormField, {\n      id: 'author',\n      formdata: this.state.formdata.author,\n      change: element => this.updateForm(element),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(FormField, {\n      id: 'title',\n      formdata: this.state.formdata.title,\n      change: element => this.updateForm(element),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), this.submitButton(), this.showError()));\n  }\n\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/zhengjie/Documents/Fulltime/nba_app/src/components/Dashboard/dashboard.js"],"names":["React","Component","FormField","styles","Editor","EditorState","convertFromRaw","convertToRaw","stateToHTML","Dashboard","state","postError","loading","formdata","author","element","value","config","name","type","placeholder","validation","required","valid","touched","validationMessage","title","updateForm","newFormdata","newElement","id","event","target","blur","validData","validate","setState","error","trim","message","submitForm","preventDefault","dataToSubmit","formIsValid","key","console","log","submitButton","showError","render","postContainer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport FormField from '../widgets/FormFields/formFields';\nimport styles from './dashboard.module.css';\n\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertFromRaw, convertToRaw } from 'draft-js';\nimport { stateToHTML } from 'draft-js-export-html';\n\nclass Dashboard extends Component{\n\n    state={\n        postError:'',\n        loading:false,\n        formdata:{\n            author:{\n                element:'input',\n                value:'',\n                config:{\n                    name:'author_input',\n                    type:'text',\n                    placeholder:'Enter Your Name'\n                },\n                validation:{\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n                validationMessage:''\n            },\n            title:{\n                element:'input',\n                value:'',\n                config:{\n                    name:'title_input',\n                    type:'text',\n                    placeholder:'Enter Your Title'\n                },\n                validation:{\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n                validationMessage:''\n            },  \n        }\n    }\n\n    updateForm = (element) => {\n        const  newFormdata = {\n            ...this.state.formdata\n        }\n        const newElement = {\n            ...newFormdata[element.id]\n        }\n\n        newElement.value = element.event.target.value;\n        if(element.blur){\n            let validData = this.validate(newElement);\n            newElement.valid = validData[0];\n            newElement.validationMessage = validData[1];\n        }\n        newElement.touched = element.blur;\n        newFormdata[element.id] = newElement;\n        this.setState({\n            formdata: newFormdata\n        })\n    }\n\n    validate = (element) => {\n        let error = [true, ''];\n\n        if(element.validation.required){\n            const valid = element.value.trim() !=='';\n            const message = `${!valid ? 'This field is required' : ''}`;\n            error = !valid ? [valid, message] : error\n        }\n        return error;\n    }\n\n\n    submitForm = (event) => {\n        event.preventDefault();\n        let dataToSubmit = {};\n        let formIsValid = true;\n        for(let key  in this.state.formdata){\n            dataToSubmit[key] = this.state.formdata[key].value\n        }\n\n        for(let key in this.state.formdata){\n            formIsValid = this.state.formdata[key].valid && formIsValid;\n        }\n\n        console.log(dataToSubmit)\n\n        if(formIsValid){\n            console.log('submit');\n        }else{\n            this.setState({\n                postError: 'Something went wrong'\n            })\n        }\n\n    }\n\n    submitButton = () => (\n        this.state.loading ?\n            'loading'\n        :\n        <div>\n            <button type=\"submit\">Add Post</button>\n        </div>\n    )\n    \n    showError = () => (\n        this.state.postError !== '' ?\n        <div className={styles.error}>{this.state.postError}</div>\n        : ''\n    )\n\n    render(){\n        return(\n            <div className = {styles.postContainer}>\n                <form onSubmit={this.submitForm}>\n                    <h2>Add Post</h2>\n\n                    <FormField\n                        id={'author'}\n                        formdata={this.state.formdata.author}\n                        change={(element) => this.updateForm(element)}\n                    />\n                    <FormField\n                        id={'title'}\n                        formdata={this.state.formdata.title}\n                        change={(element) => this.updateForm(element)}\n                    />\n                    { this.submitButton() }\n                    { this.showError()}\n                </form>     \n            </div>\n        )\n    }\n}\n\nexport default Dashboard; "]},"metadata":{},"sourceType":"module"}