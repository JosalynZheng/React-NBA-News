{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule insertFragmentIntoContentState\n * @typechecks\n * \n */\n'use strict';\n\nvar BlockMapBuilder = require('./BlockMapBuilder');\n\nvar generateRandomKey = require('./generateRandomKey');\n\nvar insertIntoList = require('./insertIntoList');\n\nvar invariant = require('fbjs/lib/invariant');\n\nfunction insertFragmentIntoContentState(contentState, selectionState, fragment) {\n  !selectionState.isCollapsed() ? process.env.NODE_ENV !== 'production' ? invariant(false, '`insertFragment` should only be called with a collapsed selection state.') : invariant(false) : void 0;\n  var targetKey = selectionState.getStartKey();\n  var targetOffset = selectionState.getStartOffset();\n  var blockMap = contentState.getBlockMap();\n  var fragmentSize = fragment.size;\n  var finalKey;\n  var finalOffset;\n\n  if (fragmentSize === 1) {\n    var targetBlock = blockMap.get(targetKey);\n    var pastedBlock = fragment.first();\n    var text = targetBlock.getText();\n    var chars = targetBlock.getCharacterList();\n    var newBlock = targetBlock.merge({\n      text: text.slice(0, targetOffset) + pastedBlock.getText() + text.slice(targetOffset),\n      characterList: insertIntoList(chars, pastedBlock.getCharacterList(), targetOffset),\n      data: pastedBlock.getData()\n    });\n    finalKey = targetKey;\n    finalOffset = targetOffset + pastedBlock.getText().length;\n    return contentState.merge({\n      blockMap: blockMap.set(targetKey, newBlock),\n      selectionBefore: selectionState,\n      selectionAfter: selectionState.merge({\n        anchorKey: finalKey,\n        anchorOffset: finalOffset,\n        focusKey: finalKey,\n        focusOffset: finalOffset,\n        isBackward: false\n      })\n    });\n  }\n\n  var newBlockArr = [];\n  contentState.getBlockMap().forEach(function (block, blockKey) {\n    if (blockKey !== targetKey) {\n      newBlockArr.push(block);\n      return;\n    }\n\n    var text = block.getText();\n    var chars = block.getCharacterList(); // Modify head portion of block.\n\n    var blockSize = text.length;\n    var headText = text.slice(0, targetOffset);\n    var headCharacters = chars.slice(0, targetOffset);\n    var appendToHead = fragment.first();\n    var modifiedHead = block.merge({\n      text: headText + appendToHead.getText(),\n      characterList: headCharacters.concat(appendToHead.getCharacterList()),\n      type: headText ? block.getType() : appendToHead.getType(),\n      data: appendToHead.getData()\n    });\n    newBlockArr.push(modifiedHead); // Insert fragment blocks after the head and before the tail.\n\n    fragment.slice(1, fragmentSize - 1).forEach(function (fragmentBlock) {\n      newBlockArr.push(fragmentBlock.set('key', generateRandomKey()));\n    }); // Modify tail portion of block.\n\n    var tailText = text.slice(targetOffset, blockSize);\n    var tailCharacters = chars.slice(targetOffset, blockSize);\n    var prependToTail = fragment.last();\n    finalKey = generateRandomKey();\n    var modifiedTail = prependToTail.merge({\n      key: finalKey,\n      text: prependToTail.getText() + tailText,\n      characterList: prependToTail.getCharacterList().concat(tailCharacters),\n      data: prependToTail.getData()\n    });\n    newBlockArr.push(modifiedTail);\n  });\n  finalOffset = fragment.last().getLength();\n  return contentState.merge({\n    blockMap: BlockMapBuilder.createFromArray(newBlockArr),\n    selectionBefore: selectionState,\n    selectionAfter: selectionState.merge({\n      anchorKey: finalKey,\n      anchorOffset: finalOffset,\n      focusKey: finalKey,\n      focusOffset: finalOffset,\n      isBackward: false\n    })\n  });\n}\n\nmodule.exports = insertFragmentIntoContentState;","map":{"version":3,"sources":["/Users/zhengjie/Documents/Fulltime/nba_app/node_modules/draft-js/lib/insertFragmentIntoContentState.js"],"names":["BlockMapBuilder","require","generateRandomKey","insertIntoList","invariant","insertFragmentIntoContentState","contentState","selectionState","fragment","isCollapsed","process","env","NODE_ENV","targetKey","getStartKey","targetOffset","getStartOffset","blockMap","getBlockMap","fragmentSize","size","finalKey","finalOffset","targetBlock","get","pastedBlock","first","text","getText","chars","getCharacterList","newBlock","merge","slice","characterList","data","getData","length","set","selectionBefore","selectionAfter","anchorKey","anchorOffset","focusKey","focusOffset","isBackward","newBlockArr","forEach","block","blockKey","push","blockSize","headText","headCharacters","appendToHead","modifiedHead","concat","type","getType","fragmentBlock","tailText","tailCharacters","prependToTail","last","modifiedTail","key","getLength","createFromArray","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule insertFragmentIntoContentState\n * @typechecks\n * \n */\n\n'use strict';\n\nvar BlockMapBuilder = require('./BlockMapBuilder');\n\nvar generateRandomKey = require('./generateRandomKey');\nvar insertIntoList = require('./insertIntoList');\nvar invariant = require('fbjs/lib/invariant');\n\nfunction insertFragmentIntoContentState(contentState, selectionState, fragment) {\n  !selectionState.isCollapsed() ? process.env.NODE_ENV !== 'production' ? invariant(false, '`insertFragment` should only be called with a collapsed selection state.') : invariant(false) : void 0;\n\n  var targetKey = selectionState.getStartKey();\n  var targetOffset = selectionState.getStartOffset();\n\n  var blockMap = contentState.getBlockMap();\n\n  var fragmentSize = fragment.size;\n  var finalKey;\n  var finalOffset;\n\n  if (fragmentSize === 1) {\n    var targetBlock = blockMap.get(targetKey);\n    var pastedBlock = fragment.first();\n    var text = targetBlock.getText();\n    var chars = targetBlock.getCharacterList();\n\n    var newBlock = targetBlock.merge({\n      text: text.slice(0, targetOffset) + pastedBlock.getText() + text.slice(targetOffset),\n      characterList: insertIntoList(chars, pastedBlock.getCharacterList(), targetOffset),\n      data: pastedBlock.getData()\n    });\n\n    finalKey = targetKey;\n    finalOffset = targetOffset + pastedBlock.getText().length;\n\n    return contentState.merge({\n      blockMap: blockMap.set(targetKey, newBlock),\n      selectionBefore: selectionState,\n      selectionAfter: selectionState.merge({\n        anchorKey: finalKey,\n        anchorOffset: finalOffset,\n        focusKey: finalKey,\n        focusOffset: finalOffset,\n        isBackward: false\n      })\n    });\n  }\n\n  var newBlockArr = [];\n\n  contentState.getBlockMap().forEach(function (block, blockKey) {\n    if (blockKey !== targetKey) {\n      newBlockArr.push(block);\n      return;\n    }\n\n    var text = block.getText();\n    var chars = block.getCharacterList();\n\n    // Modify head portion of block.\n    var blockSize = text.length;\n    var headText = text.slice(0, targetOffset);\n    var headCharacters = chars.slice(0, targetOffset);\n    var appendToHead = fragment.first();\n\n    var modifiedHead = block.merge({\n      text: headText + appendToHead.getText(),\n      characterList: headCharacters.concat(appendToHead.getCharacterList()),\n      type: headText ? block.getType() : appendToHead.getType(),\n      data: appendToHead.getData()\n    });\n\n    newBlockArr.push(modifiedHead);\n\n    // Insert fragment blocks after the head and before the tail.\n    fragment.slice(1, fragmentSize - 1).forEach(function (fragmentBlock) {\n      newBlockArr.push(fragmentBlock.set('key', generateRandomKey()));\n    });\n\n    // Modify tail portion of block.\n    var tailText = text.slice(targetOffset, blockSize);\n    var tailCharacters = chars.slice(targetOffset, blockSize);\n    var prependToTail = fragment.last();\n    finalKey = generateRandomKey();\n\n    var modifiedTail = prependToTail.merge({\n      key: finalKey,\n      text: prependToTail.getText() + tailText,\n      characterList: prependToTail.getCharacterList().concat(tailCharacters),\n      data: prependToTail.getData()\n    });\n\n    newBlockArr.push(modifiedTail);\n  });\n\n  finalOffset = fragment.last().getLength();\n\n  return contentState.merge({\n    blockMap: BlockMapBuilder.createFromArray(newBlockArr),\n    selectionBefore: selectionState,\n    selectionAfter: selectionState.merge({\n      anchorKey: finalKey,\n      anchorOffset: finalOffset,\n      focusKey: finalKey,\n      focusOffset: finalOffset,\n      isBackward: false\n    })\n  });\n}\n\nmodule.exports = insertFragmentIntoContentState;"]},"metadata":{},"sourceType":"script"}