{"ast":null,"code":"import _objectSpread from \"/Users/zhengjie/Documents/Fulltime/nba_app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/zhengjie/Documents/Fulltime/nba_app/src/components/signin/signin.js\";\nimport React, { Component } from 'react';\nimport styles from './signin.module.css';\nimport FormField from '../widgets/FormFields/formFields';\nimport { firebase } from '../../firebase';\n\nclass SignIn extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      registerError: '',\n      loading: false,\n      formdata: {\n        email: {\n          element: 'input',\n          value: '',\n          config: {\n            name: 'email_input',\n            type: 'email',\n            placeholder: 'Enter Your Email'\n          },\n          validation: {\n            required: true,\n            email: true\n          },\n          valid: false,\n          touched: false,\n          validationMessage: ''\n        },\n        password: {\n          element: 'input',\n          value: '',\n          config: {\n            name: 'password_input',\n            type: 'password',\n            placeholder: 'Enter Your Password'\n          },\n          validation: {\n            required: true,\n            password: true\n          },\n          valid: false,\n          touched: false,\n          validationMessage: ''\n        }\n      }\n    };\n\n    this.updateForm = element => {\n      const newFormdata = _objectSpread({}, this.state.formdata);\n\n      const newElement = _objectSpread({}, newFormdata[element.id]);\n\n      newElement.value = element.event.target.value;\n\n      if (element.blur) {\n        let validData = this.validate(newElement);\n        newElement.valid = validData[0];\n        newElement.validationMessage = validData[1];\n      }\n\n      newElement.touched = element.blur;\n      newFormdata[element.id] = newElement;\n      this.setState({\n        formdata: newFormdata\n      });\n    };\n\n    this.validate = element => {\n      let error = [true, ''];\n\n      if (element.validation.email) {\n        const valid = /\\S+@\\S+\\.\\S+/.test(element.value);\n        const message = `${!valid ? 'Must be a valid email' : ''}`;\n        error = !valid ? [valid, message] : error;\n      }\n\n      if (element.validation.password) {\n        const valid = element.value.length >= 5;\n        const message = `${!valid ? 'Must be greater than 5' : ''}`;\n        error = !valid ? [valid, message] : error;\n      }\n\n      if (element.validation.required) {\n        const valid = element.value.trim() !== '';\n        const message = `${!valid ? 'This field is required' : ''}`;\n        error = !valid ? [valid, message] : error;\n      }\n\n      return error;\n    };\n\n    this.submitForm = (event, type) => {\n      event.preventDefault(); //If user input no text and press enter, no form will be submitted\n\n      if (type !== null) {\n        let dataToSubmit = {};\n        let formIsValid = true;\n\n        for (let key in this.state.formdata) {\n          dataToSubmit[key] = this.state.formdata[key].value;\n        }\n\n        for (let key in this.state.formdata) {\n          formIsValid = this.state.formdata[key].valid && formIsValid;\n        }\n\n        if (formIsValid) {\n          this.setState({\n            loading: true,\n            registerError: ''\n          });\n\n          if (type) {\n            firebase.auth().signInWithEmailAndPassword(dataToSubmit.email, dataToSubmit.password).then(() => {\n              this.props.history.push('/');\n            }).catch(error => {\n              this.setState({\n                loading: false,\n                registerError: error.message\n              });\n            });\n          } else {\n            firebase.auth().createUserWithEmailAndPassword(dataToSubmit.email, dataToSubmit.password).then(() => {\n              this.props.history.push('/');\n            }).catch(error => {\n              this.setState({\n                loading: false,\n                registerError: error.message\n              });\n            });\n          }\n        }\n      }\n    };\n\n    this.submitButton = () => this.state.loading ? 'loading' : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: event => this.submitForm(event, false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Register Now\"), React.createElement(\"button\", {\n      onClick: event => this.submitForm(event, true),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Log in\"));\n\n    this.showError = () => this.state.registerError !== '' ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, this.state.registerError) : '';\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: styles.logContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: event => this.submitForm(event, null),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, \"Register / Log in\"), React.createElement(FormField, {\n      id: 'email',\n      formdata: this.state.formdata.email,\n      change: element => this.updateForm(element),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }), React.createElement(FormField, {\n      id: 'password',\n      formdata: this.state.formdata.password,\n      change: element => this.updateForm(element),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }), this.submitButton(), this.showError()));\n  }\n\n}\n\nexport default SignIn;","map":{"version":3,"sources":["/Users/zhengjie/Documents/Fulltime/nba_app/src/components/signin/signin.js"],"names":["React","Component","styles","FormField","firebase","SignIn","state","registerError","loading","formdata","email","element","value","config","name","type","placeholder","validation","required","valid","touched","validationMessage","password","updateForm","newFormdata","newElement","id","event","target","blur","validData","validate","setState","error","test","message","length","trim","submitForm","preventDefault","dataToSubmit","formIsValid","key","auth","signInWithEmailAndPassword","then","props","history","push","catch","createUserWithEmailAndPassword","submitButton","showError","render","logContainer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport styles from './signin.module.css';\nimport FormField from '../widgets/FormFields/formFields';\nimport { firebase } from '../../firebase';\n\nclass SignIn extends Component{\n    state = {\n        registerError:'',\n        loading:false,\n        formdata:{\n            email:{\n                element:'input',\n                value:'',\n                config:{\n                    name:'email_input',\n                    type:'email',\n                    placeholder:'Enter Your Email'\n                },\n                validation:{\n                    required: true,\n                    email: true\n                },\n                valid: false,\n                touched: false,\n                validationMessage:''\n            },\n            password:{\n                element:'input',\n                value:'',\n                config:{\n                    name:'password_input',\n                    type:'password',\n                    placeholder:'Enter Your Password'\n                },\n                validation:{\n                    required: true,\n                    password: true\n                },\n                valid: false,\n                touched: false,\n                validationMessage:''\n            }\n        }\n    }\n\n    updateForm = (element) => {\n        const  newFormdata = {\n            ...this.state.formdata\n        }\n        const newElement = {\n            ...newFormdata[element.id]\n        }\n\n        newElement.value = element.event.target.value;\n        if(element.blur){\n            let validData = this.validate(newElement);\n            newElement.valid = validData[0];\n            newElement.validationMessage = validData[1];\n        }\n        newElement.touched = element.blur;\n        newFormdata[element.id] = newElement;\n        this.setState({\n            formdata: newFormdata\n        })\n    }\n\n    validate = (element) => {\n        let error = [true, '']\n\n        if(element.validation.email){\n            const valid = /\\S+@\\S+\\.\\S+/.test(element.value);\n            const message = `${!valid ? 'Must be a valid email' : ''}`;\n            error = !valid ? [valid, message] : error\n        }\n        \n        if(element.validation.password){\n            const valid = element.value.length >= 5;\n            const message = `${!valid ? 'Must be greater than 5' : ''}`;\n            error = !valid ? [valid, message] : error\n        }\n\n        if(element.validation.required){\n            const valid = element.value.trim() !=='';\n            const message = `${!valid ? 'This field is required' : ''}`;\n            error = !valid ? [valid, message] : error\n        }\n        return error;\n    }\n\n    submitForm = (event, type) => {\n        event.preventDefault();//If user input no text and press enter, no form will be submitted\n        if(type !== null){\n            let dataToSubmit = {};\n            let formIsValid = true;\n            for(let key  in this.state.formdata){\n                dataToSubmit[key] = this.state.formdata[key].value\n            }\n\n            for(let key in this.state.formdata){\n                formIsValid = this.state.formdata[key].valid && formIsValid;\n            }\n\n            if(formIsValid){\n                this.setState({\n                    loading: true,\n                    registerError:''\n                })\n                if(type){\n                    firebase.auth()\n                    .signInWithEmailAndPassword(\n                        dataToSubmit.email,\n                        dataToSubmit.password\n                    ).then(() => {\n                        this.props.history.push('/')\n                    }).catch( error =>{\n                        this.setState({\n                            loading:false,\n                            registerError:error.message\n                        })\n                    })  \n                }else{\n                    firebase.auth()\n                    .createUserWithEmailAndPassword(dataToSubmit.email, dataToSubmit.password)\n                    .then(() => {\n                        this.props.history.push('/')\n                    }).catch( error =>{\n                        this.setState({\n                            loading:false,\n                            registerError:error.message\n                        })\n                    })\n                }\n            }\n        }\n    }\n\n    submitButton = () => (\n        this.state.loading ?\n            'loading'\n        :\n        <div>\n            <button onClick={(event)=>this.submitForm(event, false)}>Register Now</button>\n            <button onClick={(event)=>this.submitForm(event, true)}>Log in</button>\n        </div>\n    )\n\n    showError = () => (\n        this.state.registerError !== '' ?\n            <div>{this.state.registerError}</div>\n            : ''\n    )\n\n    render(){\n        return(\n            <div className={styles.logContainer}>\n                <form onSubmit={(event) => this.submitForm(event, null)}>\n                    <h2>Register / Log in</h2>\n                    <FormField\n                        id={'email'}\n                        formdata={this.state.formdata.email}\n                        change={(element) => this.updateForm(element)}\n                    />\n\n                    <FormField\n                        id={'password'}\n                        formdata={this.state.formdata.password}\n                        change={(element) => this.updateForm(element)}\n                    />\n                    { this.submitButton() }\n                    { this.showError()}\n                </form>\n            </div>\n        )\n    }\n}\nexport default SignIn;"]},"metadata":{},"sourceType":"module"}