{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule convertFromDraftStateToRaw\n * \n */\n'use strict';\n\nvar DraftStringKey = require('./DraftStringKey');\n\nvar encodeEntityRanges = require('./encodeEntityRanges');\n\nvar encodeInlineStyleRanges = require('./encodeInlineStyleRanges');\n\nfunction convertFromDraftStateToRaw(contentState) {\n  var entityStorageKey = 0;\n  var entityStorageMap = {};\n  var rawBlocks = [];\n  contentState.getBlockMap().forEach(function (block, blockKey) {\n    block.findEntityRanges(function (character) {\n      return character.getEntity() !== null;\n    }, function (start) {\n      // Stringify to maintain order of otherwise numeric keys.\n      var stringifiedEntityKey = DraftStringKey.stringify(block.getEntityAt(start));\n\n      if (!entityStorageMap.hasOwnProperty(stringifiedEntityKey)) {\n        entityStorageMap[stringifiedEntityKey] = '' + entityStorageKey++;\n      }\n    });\n    rawBlocks.push({\n      key: blockKey,\n      text: block.getText(),\n      type: block.getType(),\n      depth: block.getDepth(),\n      inlineStyleRanges: encodeInlineStyleRanges(block),\n      entityRanges: encodeEntityRanges(block, entityStorageMap),\n      data: block.getData().toObject()\n    });\n  }); // Flip storage map so that our storage keys map to global\n  // DraftEntity keys.\n\n  var entityKeys = Object.keys(entityStorageMap);\n  var flippedStorageMap = {};\n  entityKeys.forEach(function (key, jj) {\n    var entity = contentState.getEntity(DraftStringKey.unstringify(key));\n    flippedStorageMap[jj] = {\n      type: entity.getType(),\n      mutability: entity.getMutability(),\n      data: entity.getData()\n    };\n  });\n  return {\n    entityMap: flippedStorageMap,\n    blocks: rawBlocks\n  };\n}\n\nmodule.exports = convertFromDraftStateToRaw;","map":{"version":3,"sources":["/Users/zhengjie/Documents/Fulltime/nba_app/node_modules/draft-js/lib/convertFromDraftStateToRaw.js"],"names":["DraftStringKey","require","encodeEntityRanges","encodeInlineStyleRanges","convertFromDraftStateToRaw","contentState","entityStorageKey","entityStorageMap","rawBlocks","getBlockMap","forEach","block","blockKey","findEntityRanges","character","getEntity","start","stringifiedEntityKey","stringify","getEntityAt","hasOwnProperty","push","key","text","getText","type","getType","depth","getDepth","inlineStyleRanges","entityRanges","data","getData","toObject","entityKeys","Object","keys","flippedStorageMap","jj","entity","unstringify","mutability","getMutability","entityMap","blocks","module","exports"],"mappings":"AAAA;;;;;;;;;;;AAYA;;AAEA,IAAIA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA5B;;AAEA,IAAIC,kBAAkB,GAAGD,OAAO,CAAC,sBAAD,CAAhC;;AACA,IAAIE,uBAAuB,GAAGF,OAAO,CAAC,2BAAD,CAArC;;AAEA,SAASG,0BAAT,CAAoCC,YAApC,EAAkD;AAChD,MAAIC,gBAAgB,GAAG,CAAvB;AACA,MAAIC,gBAAgB,GAAG,EAAvB;AACA,MAAIC,SAAS,GAAG,EAAhB;AAEAH,EAAAA,YAAY,CAACI,WAAb,GAA2BC,OAA3B,CAAmC,UAAUC,KAAV,EAAiBC,QAAjB,EAA2B;AAC5DD,IAAAA,KAAK,CAACE,gBAAN,CAAuB,UAAUC,SAAV,EAAqB;AAC1C,aAAOA,SAAS,CAACC,SAAV,OAA0B,IAAjC;AACD,KAFD,EAEG,UAAUC,KAAV,EAAiB;AAClB;AACA,UAAIC,oBAAoB,GAAGjB,cAAc,CAACkB,SAAf,CAAyBP,KAAK,CAACQ,WAAN,CAAkBH,KAAlB,CAAzB,CAA3B;;AACA,UAAI,CAACT,gBAAgB,CAACa,cAAjB,CAAgCH,oBAAhC,CAAL,EAA4D;AAC1DV,QAAAA,gBAAgB,CAACU,oBAAD,CAAhB,GAAyC,KAAKX,gBAAgB,EAA9D;AACD;AACF,KARD;AAUAE,IAAAA,SAAS,CAACa,IAAV,CAAe;AACbC,MAAAA,GAAG,EAAEV,QADQ;AAEbW,MAAAA,IAAI,EAAEZ,KAAK,CAACa,OAAN,EAFO;AAGbC,MAAAA,IAAI,EAAEd,KAAK,CAACe,OAAN,EAHO;AAIbC,MAAAA,KAAK,EAAEhB,KAAK,CAACiB,QAAN,EAJM;AAKbC,MAAAA,iBAAiB,EAAE1B,uBAAuB,CAACQ,KAAD,CAL7B;AAMbmB,MAAAA,YAAY,EAAE5B,kBAAkB,CAACS,KAAD,EAAQJ,gBAAR,CANnB;AAObwB,MAAAA,IAAI,EAAEpB,KAAK,CAACqB,OAAN,GAAgBC,QAAhB;AAPO,KAAf;AASD,GApBD,EALgD,CA2BhD;AACA;;AACA,MAAIC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAY7B,gBAAZ,CAAjB;AACA,MAAI8B,iBAAiB,GAAG,EAAxB;AACAH,EAAAA,UAAU,CAACxB,OAAX,CAAmB,UAAUY,GAAV,EAAegB,EAAf,EAAmB;AACpC,QAAIC,MAAM,GAAGlC,YAAY,CAACU,SAAb,CAAuBf,cAAc,CAACwC,WAAf,CAA2BlB,GAA3B,CAAvB,CAAb;AACAe,IAAAA,iBAAiB,CAACC,EAAD,CAAjB,GAAwB;AACtBb,MAAAA,IAAI,EAAEc,MAAM,CAACb,OAAP,EADgB;AAEtBe,MAAAA,UAAU,EAAEF,MAAM,CAACG,aAAP,EAFU;AAGtBX,MAAAA,IAAI,EAAEQ,MAAM,CAACP,OAAP;AAHgB,KAAxB;AAKD,GAPD;AASA,SAAO;AACLW,IAAAA,SAAS,EAAEN,iBADN;AAELO,IAAAA,MAAM,EAAEpC;AAFH,GAAP;AAID;;AAEDqC,MAAM,CAACC,OAAP,GAAiB1C,0BAAjB","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule convertFromDraftStateToRaw\n * \n */\n\n'use strict';\n\nvar DraftStringKey = require('./DraftStringKey');\n\nvar encodeEntityRanges = require('./encodeEntityRanges');\nvar encodeInlineStyleRanges = require('./encodeInlineStyleRanges');\n\nfunction convertFromDraftStateToRaw(contentState) {\n  var entityStorageKey = 0;\n  var entityStorageMap = {};\n  var rawBlocks = [];\n\n  contentState.getBlockMap().forEach(function (block, blockKey) {\n    block.findEntityRanges(function (character) {\n      return character.getEntity() !== null;\n    }, function (start) {\n      // Stringify to maintain order of otherwise numeric keys.\n      var stringifiedEntityKey = DraftStringKey.stringify(block.getEntityAt(start));\n      if (!entityStorageMap.hasOwnProperty(stringifiedEntityKey)) {\n        entityStorageMap[stringifiedEntityKey] = '' + entityStorageKey++;\n      }\n    });\n\n    rawBlocks.push({\n      key: blockKey,\n      text: block.getText(),\n      type: block.getType(),\n      depth: block.getDepth(),\n      inlineStyleRanges: encodeInlineStyleRanges(block),\n      entityRanges: encodeEntityRanges(block, entityStorageMap),\n      data: block.getData().toObject()\n    });\n  });\n\n  // Flip storage map so that our storage keys map to global\n  // DraftEntity keys.\n  var entityKeys = Object.keys(entityStorageMap);\n  var flippedStorageMap = {};\n  entityKeys.forEach(function (key, jj) {\n    var entity = contentState.getEntity(DraftStringKey.unstringify(key));\n    flippedStorageMap[jj] = {\n      type: entity.getType(),\n      mutability: entity.getMutability(),\n      data: entity.getData()\n    };\n  });\n\n  return {\n    entityMap: flippedStorageMap,\n    blocks: rawBlocks\n  };\n}\n\nmodule.exports = convertFromDraftStateToRaw;"]},"metadata":{},"sourceType":"script"}