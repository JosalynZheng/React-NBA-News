{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ContentState\n * @typechecks\n * \n */\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar BlockMapBuilder = require('./BlockMapBuilder');\n\nvar CharacterMetadata = require('./CharacterMetadata');\n\nvar ContentBlock = require('./ContentBlock');\n\nvar DraftEntity = require('./DraftEntity');\n\nvar Immutable = require('immutable');\n\nvar SelectionState = require('./SelectionState');\n\nvar generateRandomKey = require('./generateRandomKey');\n\nvar sanitizeDraftText = require('./sanitizeDraftText');\n\nvar List = Immutable.List,\n    Record = Immutable.Record,\n    Repeat = Immutable.Repeat;\nvar defaultRecord = {\n  entityMap: null,\n  blockMap: null,\n  selectionBefore: null,\n  selectionAfter: null\n};\nvar ContentStateRecord = Record(defaultRecord);\n\nvar ContentState = function (_ContentStateRecord) {\n  _inherits(ContentState, _ContentStateRecord);\n\n  function ContentState() {\n    _classCallCheck(this, ContentState);\n\n    return _possibleConstructorReturn(this, _ContentStateRecord.apply(this, arguments));\n  }\n\n  ContentState.prototype.getEntityMap = function getEntityMap() {\n    // TODO: update this when we fully remove DraftEntity\n    return DraftEntity;\n  };\n\n  ContentState.prototype.getBlockMap = function getBlockMap() {\n    return this.get('blockMap');\n  };\n\n  ContentState.prototype.getSelectionBefore = function getSelectionBefore() {\n    return this.get('selectionBefore');\n  };\n\n  ContentState.prototype.getSelectionAfter = function getSelectionAfter() {\n    return this.get('selectionAfter');\n  };\n\n  ContentState.prototype.getBlockForKey = function getBlockForKey(key) {\n    var block = this.getBlockMap().get(key);\n    return block;\n  };\n\n  ContentState.prototype.getKeyBefore = function getKeyBefore(key) {\n    return this.getBlockMap().reverse().keySeq().skipUntil(function (v) {\n      return v === key;\n    }).skip(1).first();\n  };\n\n  ContentState.prototype.getKeyAfter = function getKeyAfter(key) {\n    return this.getBlockMap().keySeq().skipUntil(function (v) {\n      return v === key;\n    }).skip(1).first();\n  };\n\n  ContentState.prototype.getBlockAfter = function getBlockAfter(key) {\n    return this.getBlockMap().skipUntil(function (_, k) {\n      return k === key;\n    }).skip(1).first();\n  };\n\n  ContentState.prototype.getBlockBefore = function getBlockBefore(key) {\n    return this.getBlockMap().reverse().skipUntil(function (_, k) {\n      return k === key;\n    }).skip(1).first();\n  };\n\n  ContentState.prototype.getBlocksAsArray = function getBlocksAsArray() {\n    return this.getBlockMap().toArray();\n  };\n\n  ContentState.prototype.getFirstBlock = function getFirstBlock() {\n    return this.getBlockMap().first();\n  };\n\n  ContentState.prototype.getLastBlock = function getLastBlock() {\n    return this.getBlockMap().last();\n  };\n\n  ContentState.prototype.getPlainText = function getPlainText(delimiter) {\n    return this.getBlockMap().map(function (block) {\n      return block ? block.getText() : '';\n    }).join(delimiter || '\\n');\n  };\n\n  ContentState.prototype.getLastCreatedEntityKey = function getLastCreatedEntityKey() {\n    // TODO: update this when we fully remove DraftEntity\n    return DraftEntity.__getLastCreatedEntityKey();\n  };\n\n  ContentState.prototype.hasText = function hasText() {\n    var blockMap = this.getBlockMap();\n    return blockMap.size > 1 || blockMap.first().getLength() > 0;\n  };\n\n  ContentState.prototype.createEntity = function createEntity(type, mutability, data) {\n    // TODO: update this when we fully remove DraftEntity\n    DraftEntity.__create(type, mutability, data);\n\n    return this;\n  };\n\n  ContentState.prototype.mergeEntityData = function mergeEntityData(key, toMerge) {\n    // TODO: update this when we fully remove DraftEntity\n    DraftEntity.__mergeData(key, toMerge);\n\n    return this;\n  };\n\n  ContentState.prototype.replaceEntityData = function replaceEntityData(key, newData) {\n    // TODO: update this when we fully remove DraftEntity\n    DraftEntity.__replaceData(key, newData);\n\n    return this;\n  };\n\n  ContentState.prototype.addEntity = function addEntity(instance) {\n    // TODO: update this when we fully remove DraftEntity\n    DraftEntity.__add(instance);\n\n    return this;\n  };\n\n  ContentState.prototype.getEntity = function getEntity(key) {\n    // TODO: update this when we fully remove DraftEntity\n    return DraftEntity.__get(key);\n  };\n\n  ContentState.createFromBlockArray = function createFromBlockArray( // TODO: update flow type when we completely deprecate the old entity API\n  blocks, entityMap) {\n    // TODO: remove this when we completely deprecate the old entity API\n    var theBlocks = Array.isArray(blocks) ? blocks : blocks.contentBlocks;\n    var blockMap = BlockMapBuilder.createFromArray(theBlocks);\n    var selectionState = blockMap.isEmpty() ? new SelectionState() : SelectionState.createEmpty(blockMap.first().getKey());\n    return new ContentState({\n      blockMap: blockMap,\n      entityMap: entityMap || DraftEntity,\n      selectionBefore: selectionState,\n      selectionAfter: selectionState\n    });\n  };\n\n  ContentState.createFromText = function createFromText(text) {\n    var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /\\r\\n?|\\n/g;\n    var strings = text.split(delimiter);\n    var blocks = strings.map(function (block) {\n      block = sanitizeDraftText(block);\n      return new ContentBlock({\n        key: generateRandomKey(),\n        text: block,\n        type: 'unstyled',\n        characterList: List(Repeat(CharacterMetadata.EMPTY, block.length))\n      });\n    });\n    return ContentState.createFromBlockArray(blocks);\n  };\n\n  return ContentState;\n}(ContentStateRecord);\n\nmodule.exports = ContentState;","map":{"version":3,"sources":["/Users/zhengjie/Documents/Fulltime/nba_app/node_modules/draft-js/lib/ContentState.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","BlockMapBuilder","require","CharacterMetadata","ContentBlock","DraftEntity","Immutable","SelectionState","generateRandomKey","sanitizeDraftText","List","Record","Repeat","defaultRecord","entityMap","blockMap","selectionBefore","selectionAfter","ContentStateRecord","ContentState","_ContentStateRecord","apply","arguments","getEntityMap","getBlockMap","get","getSelectionBefore","getSelectionAfter","getBlockForKey","key","block","getKeyBefore","reverse","keySeq","skipUntil","v","skip","first","getKeyAfter","getBlockAfter","_","k","getBlockBefore","getBlocksAsArray","toArray","getFirstBlock","getLastBlock","last","getPlainText","delimiter","map","getText","join","getLastCreatedEntityKey","__getLastCreatedEntityKey","hasText","size","getLength","createEntity","type","mutability","data","__create","mergeEntityData","toMerge","__mergeData","replaceEntityData","newData","__replaceData","addEntity","__add","getEntity","__get","createFromBlockArray","blocks","theBlocks","Array","isArray","contentBlocks","createFromArray","selectionState","isEmpty","createEmpty","getKey","createFromText","text","length","undefined","strings","split","characterList","EMPTY","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ContentState\n * @typechecks\n * \n */\n\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar BlockMapBuilder = require('./BlockMapBuilder');\nvar CharacterMetadata = require('./CharacterMetadata');\nvar ContentBlock = require('./ContentBlock');\nvar DraftEntity = require('./DraftEntity');\nvar Immutable = require('immutable');\nvar SelectionState = require('./SelectionState');\n\nvar generateRandomKey = require('./generateRandomKey');\nvar sanitizeDraftText = require('./sanitizeDraftText');\n\nvar List = Immutable.List,\n    Record = Immutable.Record,\n    Repeat = Immutable.Repeat;\n\n\nvar defaultRecord = {\n  entityMap: null,\n  blockMap: null,\n  selectionBefore: null,\n  selectionAfter: null\n};\n\nvar ContentStateRecord = Record(defaultRecord);\n\nvar ContentState = function (_ContentStateRecord) {\n  _inherits(ContentState, _ContentStateRecord);\n\n  function ContentState() {\n    _classCallCheck(this, ContentState);\n\n    return _possibleConstructorReturn(this, _ContentStateRecord.apply(this, arguments));\n  }\n\n  ContentState.prototype.getEntityMap = function getEntityMap() {\n    // TODO: update this when we fully remove DraftEntity\n    return DraftEntity;\n  };\n\n  ContentState.prototype.getBlockMap = function getBlockMap() {\n    return this.get('blockMap');\n  };\n\n  ContentState.prototype.getSelectionBefore = function getSelectionBefore() {\n    return this.get('selectionBefore');\n  };\n\n  ContentState.prototype.getSelectionAfter = function getSelectionAfter() {\n    return this.get('selectionAfter');\n  };\n\n  ContentState.prototype.getBlockForKey = function getBlockForKey(key) {\n    var block = this.getBlockMap().get(key);\n    return block;\n  };\n\n  ContentState.prototype.getKeyBefore = function getKeyBefore(key) {\n    return this.getBlockMap().reverse().keySeq().skipUntil(function (v) {\n      return v === key;\n    }).skip(1).first();\n  };\n\n  ContentState.prototype.getKeyAfter = function getKeyAfter(key) {\n    return this.getBlockMap().keySeq().skipUntil(function (v) {\n      return v === key;\n    }).skip(1).first();\n  };\n\n  ContentState.prototype.getBlockAfter = function getBlockAfter(key) {\n    return this.getBlockMap().skipUntil(function (_, k) {\n      return k === key;\n    }).skip(1).first();\n  };\n\n  ContentState.prototype.getBlockBefore = function getBlockBefore(key) {\n    return this.getBlockMap().reverse().skipUntil(function (_, k) {\n      return k === key;\n    }).skip(1).first();\n  };\n\n  ContentState.prototype.getBlocksAsArray = function getBlocksAsArray() {\n    return this.getBlockMap().toArray();\n  };\n\n  ContentState.prototype.getFirstBlock = function getFirstBlock() {\n    return this.getBlockMap().first();\n  };\n\n  ContentState.prototype.getLastBlock = function getLastBlock() {\n    return this.getBlockMap().last();\n  };\n\n  ContentState.prototype.getPlainText = function getPlainText(delimiter) {\n    return this.getBlockMap().map(function (block) {\n      return block ? block.getText() : '';\n    }).join(delimiter || '\\n');\n  };\n\n  ContentState.prototype.getLastCreatedEntityKey = function getLastCreatedEntityKey() {\n    // TODO: update this when we fully remove DraftEntity\n    return DraftEntity.__getLastCreatedEntityKey();\n  };\n\n  ContentState.prototype.hasText = function hasText() {\n    var blockMap = this.getBlockMap();\n    return blockMap.size > 1 || blockMap.first().getLength() > 0;\n  };\n\n  ContentState.prototype.createEntity = function createEntity(type, mutability, data) {\n    // TODO: update this when we fully remove DraftEntity\n    DraftEntity.__create(type, mutability, data);\n    return this;\n  };\n\n  ContentState.prototype.mergeEntityData = function mergeEntityData(key, toMerge) {\n    // TODO: update this when we fully remove DraftEntity\n    DraftEntity.__mergeData(key, toMerge);\n    return this;\n  };\n\n  ContentState.prototype.replaceEntityData = function replaceEntityData(key, newData) {\n    // TODO: update this when we fully remove DraftEntity\n    DraftEntity.__replaceData(key, newData);\n    return this;\n  };\n\n  ContentState.prototype.addEntity = function addEntity(instance) {\n    // TODO: update this when we fully remove DraftEntity\n    DraftEntity.__add(instance);\n    return this;\n  };\n\n  ContentState.prototype.getEntity = function getEntity(key) {\n    // TODO: update this when we fully remove DraftEntity\n    return DraftEntity.__get(key);\n  };\n\n  ContentState.createFromBlockArray = function createFromBlockArray(\n  // TODO: update flow type when we completely deprecate the old entity API\n  blocks, entityMap) {\n    // TODO: remove this when we completely deprecate the old entity API\n    var theBlocks = Array.isArray(blocks) ? blocks : blocks.contentBlocks;\n    var blockMap = BlockMapBuilder.createFromArray(theBlocks);\n    var selectionState = blockMap.isEmpty() ? new SelectionState() : SelectionState.createEmpty(blockMap.first().getKey());\n    return new ContentState({\n      blockMap: blockMap,\n      entityMap: entityMap || DraftEntity,\n      selectionBefore: selectionState,\n      selectionAfter: selectionState\n    });\n  };\n\n  ContentState.createFromText = function createFromText(text) {\n    var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /\\r\\n?|\\n/g;\n\n    var strings = text.split(delimiter);\n    var blocks = strings.map(function (block) {\n      block = sanitizeDraftText(block);\n      return new ContentBlock({\n        key: generateRandomKey(),\n        text: block,\n        type: 'unstyled',\n        characterList: List(Repeat(CharacterMetadata.EMPTY, block.length))\n      });\n    });\n    return ContentState.createFromBlockArray(blocks);\n  };\n\n  return ContentState;\n}(ContentStateRecord);\n\nmodule.exports = ContentState;"]},"metadata":{},"sourceType":"script"}