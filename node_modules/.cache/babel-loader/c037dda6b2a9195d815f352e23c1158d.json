{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule convertFromHTMLToContentBlocks\n * @typechecks\n * \n */\n'use strict';\n\nvar CharacterMetadata = require('./CharacterMetadata');\n\nvar ContentBlock = require('./ContentBlock');\n\nvar DefaultDraftBlockRenderMap = require('./DefaultDraftBlockRenderMap');\n\nvar DraftEntity = require('./DraftEntity');\n\nvar Immutable = require('immutable');\n\nvar _require = require('immutable'),\n    Set = _require.Set;\n\nvar URI = require('fbjs/lib/URI');\n\nvar generateRandomKey = require('./generateRandomKey');\n\nvar getSafeBodyFromHTML = require('./getSafeBodyFromHTML');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar nullthrows = require('fbjs/lib/nullthrows');\n\nvar sanitizeDraftText = require('./sanitizeDraftText');\n\nvar List = Immutable.List,\n    OrderedSet = Immutable.OrderedSet;\nvar NBSP = '&nbsp;';\nvar SPACE = ' '; // Arbitrary max indent\n\nvar MAX_DEPTH = 4; // used for replacing characters in HTML\n\nvar REGEX_CR = new RegExp('\\r', 'g');\nvar REGEX_LF = new RegExp('\\n', 'g');\nvar REGEX_NBSP = new RegExp(NBSP, 'g');\nvar REGEX_CARRIAGE = new RegExp('&#13;?', 'g');\nvar REGEX_ZWS = new RegExp('&#8203;?', 'g'); // https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight\n\nvar boldValues = ['bold', 'bolder', '500', '600', '700', '800', '900'];\nvar notBoldValues = ['light', 'lighter', '100', '200', '300', '400']; // Block tag flow is different because LIs do not have\n// a deterministic style ;_;\n\nvar inlineTags = {\n  b: 'BOLD',\n  code: 'CODE',\n  del: 'STRIKETHROUGH',\n  em: 'ITALIC',\n  i: 'ITALIC',\n  s: 'STRIKETHROUGH',\n  strike: 'STRIKETHROUGH',\n  strong: 'BOLD',\n  u: 'UNDERLINE'\n};\nvar anchorAttr = ['className', 'href', 'rel', 'target', 'title'];\nvar imgAttr = ['alt', 'className', 'height', 'src', 'width'];\nvar lastBlock;\n\nfunction getEmptyChunk() {\n  return {\n    text: '',\n    inlines: [],\n    entities: [],\n    blocks: []\n  };\n}\n\nfunction getWhitespaceChunk(inEntity) {\n  var entities = new Array(1);\n\n  if (inEntity) {\n    entities[0] = inEntity;\n  }\n\n  return {\n    text: SPACE,\n    inlines: [OrderedSet()],\n    entities: entities,\n    blocks: []\n  };\n}\n\nfunction getSoftNewlineChunk() {\n  return {\n    text: '\\n',\n    inlines: [OrderedSet()],\n    entities: new Array(1),\n    blocks: []\n  };\n}\n\nfunction getBlockDividerChunk(block, depth) {\n  return {\n    text: '\\r',\n    inlines: [OrderedSet()],\n    entities: new Array(1),\n    blocks: [{\n      type: block,\n      depth: Math.max(0, Math.min(MAX_DEPTH, depth))\n    }]\n  };\n}\n\nfunction getListBlockType(tag, lastList) {\n  if (tag === 'li') {\n    return lastList === 'ol' ? 'ordered-list-item' : 'unordered-list-item';\n  }\n\n  return null;\n}\n\nfunction getBlockMapSupportedTags(blockRenderMap) {\n  var unstyledElement = blockRenderMap.get('unstyled').element;\n  var tags = Set([]);\n  blockRenderMap.forEach(function (draftBlock) {\n    if (draftBlock.aliasedElements) {\n      draftBlock.aliasedElements.forEach(function (tag) {\n        tags = tags.add(tag);\n      });\n    }\n\n    tags = tags.add(draftBlock.element);\n  });\n  return tags.filter(function (tag) {\n    return tag && tag !== unstyledElement;\n  }).toArray().sort();\n} // custom element conversions\n\n\nfunction getMultiMatchedType(tag, lastList, multiMatchExtractor) {\n  for (var ii = 0; ii < multiMatchExtractor.length; ii++) {\n    var matchType = multiMatchExtractor[ii](tag, lastList);\n\n    if (matchType) {\n      return matchType;\n    }\n  }\n\n  return null;\n}\n\nfunction getBlockTypeForTag(tag, lastList, blockRenderMap) {\n  var matchedTypes = blockRenderMap.filter(function (draftBlock) {\n    return draftBlock.element === tag || draftBlock.wrapper === tag || draftBlock.aliasedElements && draftBlock.aliasedElements.some(function (alias) {\n      return alias === tag;\n    });\n  }).keySeq().toSet().toArray().sort(); // if we dont have any matched type, return unstyled\n  // if we have one matched type return it\n  // if we have multi matched types use the multi-match function to gather type\n\n  switch (matchedTypes.length) {\n    case 0:\n      return 'unstyled';\n\n    case 1:\n      return matchedTypes[0];\n\n    default:\n      return getMultiMatchedType(tag, lastList, [getListBlockType]) || 'unstyled';\n  }\n}\n\nfunction processInlineTag(tag, node, currentStyle) {\n  var styleToCheck = inlineTags[tag];\n\n  if (styleToCheck) {\n    currentStyle = currentStyle.add(styleToCheck).toOrderedSet();\n  } else if (node instanceof HTMLElement) {\n    var htmlElement = node;\n    currentStyle = currentStyle.withMutations(function (style) {\n      var fontWeight = htmlElement.style.fontWeight;\n      var fontStyle = htmlElement.style.fontStyle;\n      var textDecoration = htmlElement.style.textDecoration;\n\n      if (boldValues.indexOf(fontWeight) >= 0) {\n        style.add('BOLD');\n      } else if (notBoldValues.indexOf(fontWeight) >= 0) {\n        style.remove('BOLD');\n      }\n\n      if (fontStyle === 'italic') {\n        style.add('ITALIC');\n      } else if (fontStyle === 'normal') {\n        style.remove('ITALIC');\n      }\n\n      if (textDecoration === 'underline') {\n        style.add('UNDERLINE');\n      }\n\n      if (textDecoration === 'line-through') {\n        style.add('STRIKETHROUGH');\n      }\n\n      if (textDecoration === 'none') {\n        style.remove('UNDERLINE');\n        style.remove('STRIKETHROUGH');\n      }\n    }).toOrderedSet();\n  }\n\n  return currentStyle;\n}\n\nfunction joinChunks(A, B) {\n  // Sometimes two blocks will touch in the DOM and we need to strip the\n  // extra delimiter to preserve niceness.\n  var lastInA = A.text.slice(-1);\n  var firstInB = B.text.slice(0, 1);\n\n  if (lastInA === '\\r' && firstInB === '\\r') {\n    A.text = A.text.slice(0, -1);\n    A.inlines.pop();\n    A.entities.pop();\n    A.blocks.pop();\n  } // Kill whitespace after blocks\n\n\n  if (lastInA === '\\r') {\n    if (B.text === SPACE || B.text === '\\n') {\n      return A;\n    } else if (firstInB === SPACE || firstInB === '\\n') {\n      B.text = B.text.slice(1);\n      B.inlines.shift();\n      B.entities.shift();\n    }\n  }\n\n  return {\n    text: A.text + B.text,\n    inlines: A.inlines.concat(B.inlines),\n    entities: A.entities.concat(B.entities),\n    blocks: A.blocks.concat(B.blocks)\n  };\n}\n/**\n * Check to see if we have anything like <p> <blockquote> <h1>... to create\n * block tags from. If we do, we can use those and ignore <div> tags. If we\n * don't, we can treat <div> tags as meaningful (unstyled) blocks.\n */\n\n\nfunction containsSemanticBlockMarkup(html, blockTags) {\n  return blockTags.some(function (tag) {\n    return html.indexOf('<' + tag) !== -1;\n  });\n}\n\nfunction hasValidLinkText(link) {\n  !(link instanceof HTMLAnchorElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Link must be an HTMLAnchorElement.') : invariant(false) : void 0;\n  var protocol = link.protocol;\n  return protocol === 'http:' || protocol === 'https:' || protocol === 'mailto:';\n}\n\nfunction genFragment(entityMap, node, inlineStyle, lastList, inBlock, blockTags, depth, blockRenderMap, inEntity) {\n  var nodeName = node.nodeName.toLowerCase();\n  var newBlock = false;\n  var nextBlockType = 'unstyled';\n  var lastLastBlock = lastBlock;\n  var newEntityMap = entityMap; // Base Case\n\n  if (nodeName === '#text') {\n    var text = node.textContent;\n\n    if (text.trim() === '' && inBlock !== 'pre') {\n      return {\n        chunk: getWhitespaceChunk(inEntity),\n        entityMap: entityMap\n      };\n    }\n\n    if (inBlock !== 'pre') {\n      // Can't use empty string because MSWord\n      text = text.replace(REGEX_LF, SPACE);\n    } // save the last block so we can use it later\n\n\n    lastBlock = nodeName;\n    return {\n      chunk: {\n        text: text,\n        inlines: Array(text.length).fill(inlineStyle),\n        entities: Array(text.length).fill(inEntity),\n        blocks: []\n      },\n      entityMap: entityMap\n    };\n  } // save the last block so we can use it later\n\n\n  lastBlock = nodeName; // BR tags\n\n  if (nodeName === 'br') {\n    if (lastLastBlock === 'br' && (!inBlock || getBlockTypeForTag(inBlock, lastList, blockRenderMap) === 'unstyled')) {\n      return {\n        chunk: getBlockDividerChunk('unstyled', depth),\n        entityMap: entityMap\n      };\n    }\n\n    return {\n      chunk: getSoftNewlineChunk(),\n      entityMap: entityMap\n    };\n  } // IMG tags\n\n\n  if (nodeName === 'img' && node instanceof HTMLImageElement && node.attributes.getNamedItem('src') && node.attributes.getNamedItem('src').value) {\n    var image = node;\n    var entityConfig = {};\n    imgAttr.forEach(function (attr) {\n      var imageAttribute = image.getAttribute(attr);\n\n      if (imageAttribute) {\n        entityConfig[attr] = imageAttribute;\n      }\n    }); // Forcing this node to have children because otherwise no entity will be\n    // created for this node.\n    // The child text node cannot just have a space or return as content -\n    // we strip those out.\n    // See https://github.com/facebook/draft-js/issues/231 for some context.\n\n    node.textContent = '\\uD83D\\uDCF7'; // TODO: update this when we remove DraftEntity entirely\n\n    inEntity = DraftEntity.__create('IMAGE', 'MUTABLE', entityConfig || {});\n  }\n\n  var chunk = getEmptyChunk();\n  var newChunk = null; // Inline tags\n\n  inlineStyle = processInlineTag(nodeName, node, inlineStyle); // Handle lists\n\n  if (nodeName === 'ul' || nodeName === 'ol') {\n    if (lastList) {\n      depth += 1;\n    }\n\n    lastList = nodeName;\n  } // Block Tags\n\n\n  if (!inBlock && blockTags.indexOf(nodeName) !== -1) {\n    chunk = getBlockDividerChunk(getBlockTypeForTag(nodeName, lastList, blockRenderMap), depth);\n    inBlock = nodeName;\n    newBlock = true;\n  } else if (lastList && inBlock === 'li' && nodeName === 'li') {\n    chunk = getBlockDividerChunk(getBlockTypeForTag(nodeName, lastList, blockRenderMap), depth);\n    inBlock = nodeName;\n    newBlock = true;\n    nextBlockType = lastList === 'ul' ? 'unordered-list-item' : 'ordered-list-item';\n  } // Recurse through children\n\n\n  var child = node.firstChild;\n\n  if (child != null) {\n    nodeName = child.nodeName.toLowerCase();\n  }\n\n  var entityId = null;\n\n  while (child) {\n    if (child instanceof HTMLAnchorElement && child.href && hasValidLinkText(child)) {\n      (function () {\n        var anchor = child;\n        var entityConfig = {};\n        anchorAttr.forEach(function (attr) {\n          var anchorAttribute = anchor.getAttribute(attr);\n\n          if (anchorAttribute) {\n            entityConfig[attr] = anchorAttribute;\n          }\n        });\n        entityConfig.url = new URI(anchor.href).toString(); // TODO: update this when we remove DraftEntity completely\n\n        entityId = DraftEntity.__create('LINK', 'MUTABLE', entityConfig || {});\n      })();\n    } else {\n      entityId = undefined;\n    }\n\n    var _genFragment = genFragment(newEntityMap, child, inlineStyle, lastList, inBlock, blockTags, depth, blockRenderMap, entityId || inEntity),\n        generatedChunk = _genFragment.chunk,\n        maybeUpdatedEntityMap = _genFragment.entityMap;\n\n    newChunk = generatedChunk;\n    newEntityMap = maybeUpdatedEntityMap;\n    chunk = joinChunks(chunk, newChunk);\n    var sibling = child.nextSibling; // Put in a newline to break up blocks inside blocks\n\n    if (sibling && blockTags.indexOf(nodeName) >= 0 && inBlock) {\n      chunk = joinChunks(chunk, getSoftNewlineChunk());\n    }\n\n    if (sibling) {\n      nodeName = sibling.nodeName.toLowerCase();\n    }\n\n    child = sibling;\n  }\n\n  if (newBlock) {\n    chunk = joinChunks(chunk, getBlockDividerChunk(nextBlockType, depth));\n  }\n\n  return {\n    chunk: chunk,\n    entityMap: newEntityMap\n  };\n}\n\nfunction getChunkForHTML(html, DOMBuilder, blockRenderMap, entityMap) {\n  html = html.trim().replace(REGEX_CR, '').replace(REGEX_NBSP, SPACE).replace(REGEX_CARRIAGE, '').replace(REGEX_ZWS, '');\n  var supportedBlockTags = getBlockMapSupportedTags(blockRenderMap);\n  var safeBody = DOMBuilder(html);\n\n  if (!safeBody) {\n    return null;\n  }\n\n  lastBlock = null; // Sometimes we aren't dealing with content that contains nice semantic\n  // tags. In this case, use divs to separate everything out into paragraphs\n  // and hope for the best.\n\n  var workingBlocks = containsSemanticBlockMarkup(html, supportedBlockTags) ? supportedBlockTags : ['div']; // Start with -1 block depth to offset the fact that we are passing in a fake\n  // UL block to start with.\n\n  var _genFragment2 = genFragment(entityMap, safeBody, OrderedSet(), 'ul', null, workingBlocks, -1, blockRenderMap),\n      chunk = _genFragment2.chunk,\n      newEntityMap = _genFragment2.entityMap; // join with previous block to prevent weirdness on paste\n\n\n  if (chunk.text.indexOf('\\r') === 0) {\n    chunk = {\n      text: chunk.text.slice(1),\n      inlines: chunk.inlines.slice(1),\n      entities: chunk.entities.slice(1),\n      blocks: chunk.blocks\n    };\n  } // Kill block delimiter at the end\n\n\n  if (chunk.text.slice(-1) === '\\r') {\n    chunk.text = chunk.text.slice(0, -1);\n    chunk.inlines = chunk.inlines.slice(0, -1);\n    chunk.entities = chunk.entities.slice(0, -1);\n    chunk.blocks.pop();\n  } // If we saw no block tags, put an unstyled one in\n\n\n  if (chunk.blocks.length === 0) {\n    chunk.blocks.push({\n      type: 'unstyled',\n      depth: 0\n    });\n  } // Sometimes we start with text that isn't in a block, which is then\n  // followed by blocks. Need to fix up the blocks to add in\n  // an unstyled block for this content\n\n\n  if (chunk.text.split('\\r').length === chunk.blocks.length + 1) {\n    chunk.blocks.unshift({\n      type: 'unstyled',\n      depth: 0\n    });\n  }\n\n  return {\n    chunk: chunk,\n    entityMap: newEntityMap\n  };\n}\n\nfunction convertFromHTMLtoContentBlocks(html) {\n  var DOMBuilder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getSafeBodyFromHTML;\n  var blockRenderMap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DefaultDraftBlockRenderMap; // Be ABSOLUTELY SURE that the dom builder you pass here won't execute\n  // arbitrary code in whatever environment you're running this in. For an\n  // example of how we try to do this in-browser, see getSafeBodyFromHTML.\n  // TODO: replace DraftEntity with an OrderedMap here\n\n  var chunkData = getChunkForHTML(html, DOMBuilder, blockRenderMap, DraftEntity);\n\n  if (chunkData == null) {\n    return null;\n  }\n\n  var chunk = chunkData.chunk,\n      newEntityMap = chunkData.entityMap;\n  var start = 0;\n  return {\n    contentBlocks: chunk.text.split('\\r').map(function (textBlock, ii) {\n      // Make absolutely certain that our text is acceptable.\n      textBlock = sanitizeDraftText(textBlock);\n      var end = start + textBlock.length;\n      var inlines = nullthrows(chunk).inlines.slice(start, end);\n      var entities = nullthrows(chunk).entities.slice(start, end);\n      var characterList = List(inlines.map(function (style, ii) {\n        var data = {\n          style: style,\n          entity: null\n        };\n\n        if (entities[ii]) {\n          data.entity = entities[ii];\n        }\n\n        return CharacterMetadata.create(data);\n      }));\n      start = end + 1;\n      return new ContentBlock({\n        key: generateRandomKey(),\n        type: nullthrows(chunk).blocks[ii].type,\n        depth: nullthrows(chunk).blocks[ii].depth,\n        text: textBlock,\n        characterList: characterList\n      });\n    }),\n    entityMap: newEntityMap\n  };\n}\n\nmodule.exports = convertFromHTMLtoContentBlocks;","map":{"version":3,"sources":["/Users/zhengjie/Documents/Fulltime/nba_app/node_modules/draft-js/lib/convertFromHTMLToContentBlocks.js"],"names":["CharacterMetadata","require","ContentBlock","DefaultDraftBlockRenderMap","DraftEntity","Immutable","_require","Set","URI","generateRandomKey","getSafeBodyFromHTML","invariant","nullthrows","sanitizeDraftText","List","OrderedSet","NBSP","SPACE","MAX_DEPTH","REGEX_CR","RegExp","REGEX_LF","REGEX_NBSP","REGEX_CARRIAGE","REGEX_ZWS","boldValues","notBoldValues","inlineTags","b","code","del","em","i","s","strike","strong","u","anchorAttr","imgAttr","lastBlock","getEmptyChunk","text","inlines","entities","blocks","getWhitespaceChunk","inEntity","Array","getSoftNewlineChunk","getBlockDividerChunk","block","depth","type","Math","max","min","getListBlockType","tag","lastList","getBlockMapSupportedTags","blockRenderMap","unstyledElement","get","element","tags","forEach","draftBlock","aliasedElements","add","filter","toArray","sort","getMultiMatchedType","multiMatchExtractor","ii","length","matchType","getBlockTypeForTag","matchedTypes","wrapper","some","alias","keySeq","toSet","processInlineTag","node","currentStyle","styleToCheck","toOrderedSet","HTMLElement","htmlElement","withMutations","style","fontWeight","fontStyle","textDecoration","indexOf","remove","joinChunks","A","B","lastInA","slice","firstInB","pop","shift","concat","containsSemanticBlockMarkup","html","blockTags","hasValidLinkText","link","HTMLAnchorElement","process","env","NODE_ENV","protocol","genFragment","entityMap","inlineStyle","inBlock","nodeName","toLowerCase","newBlock","nextBlockType","lastLastBlock","newEntityMap","textContent","trim","chunk","replace","fill","HTMLImageElement","attributes","getNamedItem","value","image","entityConfig","attr","imageAttribute","getAttribute","__create","newChunk","child","firstChild","entityId","href","anchor","anchorAttribute","url","toString","undefined","_genFragment","generatedChunk","maybeUpdatedEntityMap","sibling","nextSibling","getChunkForHTML","DOMBuilder","supportedBlockTags","safeBody","workingBlocks","_genFragment2","push","split","unshift","convertFromHTMLtoContentBlocks","arguments","chunkData","start","contentBlocks","map","textBlock","end","characterList","data","entity","create","key","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule convertFromHTMLToContentBlocks\n * @typechecks\n * \n */\n\n'use strict';\n\nvar CharacterMetadata = require('./CharacterMetadata');\nvar ContentBlock = require('./ContentBlock');\nvar DefaultDraftBlockRenderMap = require('./DefaultDraftBlockRenderMap');\nvar DraftEntity = require('./DraftEntity');\nvar Immutable = require('immutable');\n\nvar _require = require('immutable'),\n    Set = _require.Set;\n\nvar URI = require('fbjs/lib/URI');\n\nvar generateRandomKey = require('./generateRandomKey');\nvar getSafeBodyFromHTML = require('./getSafeBodyFromHTML');\nvar invariant = require('fbjs/lib/invariant');\nvar nullthrows = require('fbjs/lib/nullthrows');\nvar sanitizeDraftText = require('./sanitizeDraftText');\n\nvar List = Immutable.List,\n    OrderedSet = Immutable.OrderedSet;\n\n\nvar NBSP = '&nbsp;';\nvar SPACE = ' ';\n\n// Arbitrary max indent\nvar MAX_DEPTH = 4;\n\n// used for replacing characters in HTML\nvar REGEX_CR = new RegExp('\\r', 'g');\nvar REGEX_LF = new RegExp('\\n', 'g');\nvar REGEX_NBSP = new RegExp(NBSP, 'g');\nvar REGEX_CARRIAGE = new RegExp('&#13;?', 'g');\nvar REGEX_ZWS = new RegExp('&#8203;?', 'g');\n\n// https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight\nvar boldValues = ['bold', 'bolder', '500', '600', '700', '800', '900'];\nvar notBoldValues = ['light', 'lighter', '100', '200', '300', '400'];\n\n// Block tag flow is different because LIs do not have\n// a deterministic style ;_;\nvar inlineTags = {\n  b: 'BOLD',\n  code: 'CODE',\n  del: 'STRIKETHROUGH',\n  em: 'ITALIC',\n  i: 'ITALIC',\n  s: 'STRIKETHROUGH',\n  strike: 'STRIKETHROUGH',\n  strong: 'BOLD',\n  u: 'UNDERLINE'\n};\n\nvar anchorAttr = ['className', 'href', 'rel', 'target', 'title'];\n\nvar imgAttr = ['alt', 'className', 'height', 'src', 'width'];\n\nvar lastBlock;\n\nfunction getEmptyChunk() {\n  return {\n    text: '',\n    inlines: [],\n    entities: [],\n    blocks: []\n  };\n}\n\nfunction getWhitespaceChunk(inEntity) {\n  var entities = new Array(1);\n  if (inEntity) {\n    entities[0] = inEntity;\n  }\n  return {\n    text: SPACE,\n    inlines: [OrderedSet()],\n    entities: entities,\n    blocks: []\n  };\n}\n\nfunction getSoftNewlineChunk() {\n  return {\n    text: '\\n',\n    inlines: [OrderedSet()],\n    entities: new Array(1),\n    blocks: []\n  };\n}\n\nfunction getBlockDividerChunk(block, depth) {\n  return {\n    text: '\\r',\n    inlines: [OrderedSet()],\n    entities: new Array(1),\n    blocks: [{\n      type: block,\n      depth: Math.max(0, Math.min(MAX_DEPTH, depth))\n    }]\n  };\n}\n\nfunction getListBlockType(tag, lastList) {\n  if (tag === 'li') {\n    return lastList === 'ol' ? 'ordered-list-item' : 'unordered-list-item';\n  }\n  return null;\n}\n\nfunction getBlockMapSupportedTags(blockRenderMap) {\n  var unstyledElement = blockRenderMap.get('unstyled').element;\n  var tags = Set([]);\n\n  blockRenderMap.forEach(function (draftBlock) {\n    if (draftBlock.aliasedElements) {\n      draftBlock.aliasedElements.forEach(function (tag) {\n        tags = tags.add(tag);\n      });\n    }\n\n    tags = tags.add(draftBlock.element);\n  });\n\n  return tags.filter(function (tag) {\n    return tag && tag !== unstyledElement;\n  }).toArray().sort();\n}\n\n// custom element conversions\nfunction getMultiMatchedType(tag, lastList, multiMatchExtractor) {\n  for (var ii = 0; ii < multiMatchExtractor.length; ii++) {\n    var matchType = multiMatchExtractor[ii](tag, lastList);\n    if (matchType) {\n      return matchType;\n    }\n  }\n  return null;\n}\n\nfunction getBlockTypeForTag(tag, lastList, blockRenderMap) {\n  var matchedTypes = blockRenderMap.filter(function (draftBlock) {\n    return draftBlock.element === tag || draftBlock.wrapper === tag || draftBlock.aliasedElements && draftBlock.aliasedElements.some(function (alias) {\n      return alias === tag;\n    });\n  }).keySeq().toSet().toArray().sort();\n\n  // if we dont have any matched type, return unstyled\n  // if we have one matched type return it\n  // if we have multi matched types use the multi-match function to gather type\n  switch (matchedTypes.length) {\n    case 0:\n      return 'unstyled';\n    case 1:\n      return matchedTypes[0];\n    default:\n      return getMultiMatchedType(tag, lastList, [getListBlockType]) || 'unstyled';\n  }\n}\n\nfunction processInlineTag(tag, node, currentStyle) {\n  var styleToCheck = inlineTags[tag];\n  if (styleToCheck) {\n    currentStyle = currentStyle.add(styleToCheck).toOrderedSet();\n  } else if (node instanceof HTMLElement) {\n    var htmlElement = node;\n    currentStyle = currentStyle.withMutations(function (style) {\n      var fontWeight = htmlElement.style.fontWeight;\n      var fontStyle = htmlElement.style.fontStyle;\n      var textDecoration = htmlElement.style.textDecoration;\n\n      if (boldValues.indexOf(fontWeight) >= 0) {\n        style.add('BOLD');\n      } else if (notBoldValues.indexOf(fontWeight) >= 0) {\n        style.remove('BOLD');\n      }\n\n      if (fontStyle === 'italic') {\n        style.add('ITALIC');\n      } else if (fontStyle === 'normal') {\n        style.remove('ITALIC');\n      }\n\n      if (textDecoration === 'underline') {\n        style.add('UNDERLINE');\n      }\n      if (textDecoration === 'line-through') {\n        style.add('STRIKETHROUGH');\n      }\n      if (textDecoration === 'none') {\n        style.remove('UNDERLINE');\n        style.remove('STRIKETHROUGH');\n      }\n    }).toOrderedSet();\n  }\n  return currentStyle;\n}\n\nfunction joinChunks(A, B) {\n  // Sometimes two blocks will touch in the DOM and we need to strip the\n  // extra delimiter to preserve niceness.\n  var lastInA = A.text.slice(-1);\n  var firstInB = B.text.slice(0, 1);\n\n  if (lastInA === '\\r' && firstInB === '\\r') {\n    A.text = A.text.slice(0, -1);\n    A.inlines.pop();\n    A.entities.pop();\n    A.blocks.pop();\n  }\n\n  // Kill whitespace after blocks\n  if (lastInA === '\\r') {\n    if (B.text === SPACE || B.text === '\\n') {\n      return A;\n    } else if (firstInB === SPACE || firstInB === '\\n') {\n      B.text = B.text.slice(1);\n      B.inlines.shift();\n      B.entities.shift();\n    }\n  }\n\n  return {\n    text: A.text + B.text,\n    inlines: A.inlines.concat(B.inlines),\n    entities: A.entities.concat(B.entities),\n    blocks: A.blocks.concat(B.blocks)\n  };\n}\n\n/**\n * Check to see if we have anything like <p> <blockquote> <h1>... to create\n * block tags from. If we do, we can use those and ignore <div> tags. If we\n * don't, we can treat <div> tags as meaningful (unstyled) blocks.\n */\nfunction containsSemanticBlockMarkup(html, blockTags) {\n  return blockTags.some(function (tag) {\n    return html.indexOf('<' + tag) !== -1;\n  });\n}\n\nfunction hasValidLinkText(link) {\n  !(link instanceof HTMLAnchorElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Link must be an HTMLAnchorElement.') : invariant(false) : void 0;\n  var protocol = link.protocol;\n  return protocol === 'http:' || protocol === 'https:' || protocol === 'mailto:';\n}\n\nfunction genFragment(entityMap, node, inlineStyle, lastList, inBlock, blockTags, depth, blockRenderMap, inEntity) {\n  var nodeName = node.nodeName.toLowerCase();\n  var newBlock = false;\n  var nextBlockType = 'unstyled';\n  var lastLastBlock = lastBlock;\n  var newEntityMap = entityMap;\n\n  // Base Case\n  if (nodeName === '#text') {\n    var text = node.textContent;\n    if (text.trim() === '' && inBlock !== 'pre') {\n      return { chunk: getWhitespaceChunk(inEntity), entityMap: entityMap };\n    }\n    if (inBlock !== 'pre') {\n      // Can't use empty string because MSWord\n      text = text.replace(REGEX_LF, SPACE);\n    }\n\n    // save the last block so we can use it later\n    lastBlock = nodeName;\n\n    return {\n      chunk: {\n        text: text,\n        inlines: Array(text.length).fill(inlineStyle),\n        entities: Array(text.length).fill(inEntity),\n        blocks: []\n      },\n      entityMap: entityMap\n    };\n  }\n\n  // save the last block so we can use it later\n  lastBlock = nodeName;\n\n  // BR tags\n  if (nodeName === 'br') {\n    if (lastLastBlock === 'br' && (!inBlock || getBlockTypeForTag(inBlock, lastList, blockRenderMap) === 'unstyled')) {\n      return { chunk: getBlockDividerChunk('unstyled', depth), entityMap: entityMap };\n    }\n    return { chunk: getSoftNewlineChunk(), entityMap: entityMap };\n  }\n\n  // IMG tags\n  if (nodeName === 'img' && node instanceof HTMLImageElement && node.attributes.getNamedItem('src') && node.attributes.getNamedItem('src').value) {\n    var image = node;\n    var entityConfig = {};\n\n    imgAttr.forEach(function (attr) {\n      var imageAttribute = image.getAttribute(attr);\n      if (imageAttribute) {\n        entityConfig[attr] = imageAttribute;\n      }\n    });\n    // Forcing this node to have children because otherwise no entity will be\n    // created for this node.\n    // The child text node cannot just have a space or return as content -\n    // we strip those out.\n    // See https://github.com/facebook/draft-js/issues/231 for some context.\n    node.textContent = '\\uD83D\\uDCF7';\n\n    // TODO: update this when we remove DraftEntity entirely\n    inEntity = DraftEntity.__create('IMAGE', 'MUTABLE', entityConfig || {});\n  }\n\n  var chunk = getEmptyChunk();\n  var newChunk = null;\n\n  // Inline tags\n  inlineStyle = processInlineTag(nodeName, node, inlineStyle);\n\n  // Handle lists\n  if (nodeName === 'ul' || nodeName === 'ol') {\n    if (lastList) {\n      depth += 1;\n    }\n    lastList = nodeName;\n  }\n\n  // Block Tags\n  if (!inBlock && blockTags.indexOf(nodeName) !== -1) {\n    chunk = getBlockDividerChunk(getBlockTypeForTag(nodeName, lastList, blockRenderMap), depth);\n    inBlock = nodeName;\n    newBlock = true;\n  } else if (lastList && inBlock === 'li' && nodeName === 'li') {\n    chunk = getBlockDividerChunk(getBlockTypeForTag(nodeName, lastList, blockRenderMap), depth);\n    inBlock = nodeName;\n    newBlock = true;\n    nextBlockType = lastList === 'ul' ? 'unordered-list-item' : 'ordered-list-item';\n  }\n\n  // Recurse through children\n  var child = node.firstChild;\n  if (child != null) {\n    nodeName = child.nodeName.toLowerCase();\n  }\n\n  var entityId = null;\n\n  while (child) {\n    if (child instanceof HTMLAnchorElement && child.href && hasValidLinkText(child)) {\n      (function () {\n        var anchor = child;\n        var entityConfig = {};\n\n        anchorAttr.forEach(function (attr) {\n          var anchorAttribute = anchor.getAttribute(attr);\n          if (anchorAttribute) {\n            entityConfig[attr] = anchorAttribute;\n          }\n        });\n\n        entityConfig.url = new URI(anchor.href).toString();\n        // TODO: update this when we remove DraftEntity completely\n        entityId = DraftEntity.__create('LINK', 'MUTABLE', entityConfig || {});\n      })();\n    } else {\n      entityId = undefined;\n    }\n\n    var _genFragment = genFragment(newEntityMap, child, inlineStyle, lastList, inBlock, blockTags, depth, blockRenderMap, entityId || inEntity),\n        generatedChunk = _genFragment.chunk,\n        maybeUpdatedEntityMap = _genFragment.entityMap;\n\n    newChunk = generatedChunk;\n    newEntityMap = maybeUpdatedEntityMap;\n\n    chunk = joinChunks(chunk, newChunk);\n    var sibling = child.nextSibling;\n\n    // Put in a newline to break up blocks inside blocks\n    if (sibling && blockTags.indexOf(nodeName) >= 0 && inBlock) {\n      chunk = joinChunks(chunk, getSoftNewlineChunk());\n    }\n    if (sibling) {\n      nodeName = sibling.nodeName.toLowerCase();\n    }\n    child = sibling;\n  }\n\n  if (newBlock) {\n    chunk = joinChunks(chunk, getBlockDividerChunk(nextBlockType, depth));\n  }\n\n  return { chunk: chunk, entityMap: newEntityMap };\n}\n\nfunction getChunkForHTML(html, DOMBuilder, blockRenderMap, entityMap) {\n  html = html.trim().replace(REGEX_CR, '').replace(REGEX_NBSP, SPACE).replace(REGEX_CARRIAGE, '').replace(REGEX_ZWS, '');\n\n  var supportedBlockTags = getBlockMapSupportedTags(blockRenderMap);\n\n  var safeBody = DOMBuilder(html);\n  if (!safeBody) {\n    return null;\n  }\n  lastBlock = null;\n\n  // Sometimes we aren't dealing with content that contains nice semantic\n  // tags. In this case, use divs to separate everything out into paragraphs\n  // and hope for the best.\n  var workingBlocks = containsSemanticBlockMarkup(html, supportedBlockTags) ? supportedBlockTags : ['div'];\n\n  // Start with -1 block depth to offset the fact that we are passing in a fake\n  // UL block to start with.\n\n  var _genFragment2 = genFragment(entityMap, safeBody, OrderedSet(), 'ul', null, workingBlocks, -1, blockRenderMap),\n      chunk = _genFragment2.chunk,\n      newEntityMap = _genFragment2.entityMap;\n\n  // join with previous block to prevent weirdness on paste\n\n\n  if (chunk.text.indexOf('\\r') === 0) {\n    chunk = {\n      text: chunk.text.slice(1),\n      inlines: chunk.inlines.slice(1),\n      entities: chunk.entities.slice(1),\n      blocks: chunk.blocks\n    };\n  }\n\n  // Kill block delimiter at the end\n  if (chunk.text.slice(-1) === '\\r') {\n    chunk.text = chunk.text.slice(0, -1);\n    chunk.inlines = chunk.inlines.slice(0, -1);\n    chunk.entities = chunk.entities.slice(0, -1);\n    chunk.blocks.pop();\n  }\n\n  // If we saw no block tags, put an unstyled one in\n  if (chunk.blocks.length === 0) {\n    chunk.blocks.push({ type: 'unstyled', depth: 0 });\n  }\n\n  // Sometimes we start with text that isn't in a block, which is then\n  // followed by blocks. Need to fix up the blocks to add in\n  // an unstyled block for this content\n  if (chunk.text.split('\\r').length === chunk.blocks.length + 1) {\n    chunk.blocks.unshift({ type: 'unstyled', depth: 0 });\n  }\n\n  return { chunk: chunk, entityMap: newEntityMap };\n}\n\nfunction convertFromHTMLtoContentBlocks(html) {\n  var DOMBuilder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getSafeBodyFromHTML;\n  var blockRenderMap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DefaultDraftBlockRenderMap;\n\n  // Be ABSOLUTELY SURE that the dom builder you pass here won't execute\n  // arbitrary code in whatever environment you're running this in. For an\n  // example of how we try to do this in-browser, see getSafeBodyFromHTML.\n\n  // TODO: replace DraftEntity with an OrderedMap here\n  var chunkData = getChunkForHTML(html, DOMBuilder, blockRenderMap, DraftEntity);\n\n  if (chunkData == null) {\n    return null;\n  }\n\n  var chunk = chunkData.chunk,\n      newEntityMap = chunkData.entityMap;\n\n\n  var start = 0;\n  return {\n    contentBlocks: chunk.text.split('\\r').map(function (textBlock, ii) {\n      // Make absolutely certain that our text is acceptable.\n      textBlock = sanitizeDraftText(textBlock);\n      var end = start + textBlock.length;\n      var inlines = nullthrows(chunk).inlines.slice(start, end);\n      var entities = nullthrows(chunk).entities.slice(start, end);\n      var characterList = List(inlines.map(function (style, ii) {\n        var data = { style: style, entity: null };\n        if (entities[ii]) {\n          data.entity = entities[ii];\n        }\n        return CharacterMetadata.create(data);\n      }));\n      start = end + 1;\n\n      return new ContentBlock({\n        key: generateRandomKey(),\n        type: nullthrows(chunk).blocks[ii].type,\n        depth: nullthrows(chunk).blocks[ii].depth,\n        text: textBlock,\n        characterList: characterList\n      });\n    }),\n    entityMap: newEntityMap\n  };\n}\n\nmodule.exports = convertFromHTMLtoContentBlocks;"]},"metadata":{},"sourceType":"script"}