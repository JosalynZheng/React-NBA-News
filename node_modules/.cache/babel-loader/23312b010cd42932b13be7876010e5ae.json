{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule editOnCut\n * \n */\n'use strict';\n\nvar DraftModifier = require('./DraftModifier');\n\nvar EditorState = require('./EditorState');\n\nvar Style = require('fbjs/lib/Style');\n\nvar getFragmentFromSelection = require('./getFragmentFromSelection');\n\nvar getScrollPosition = require('fbjs/lib/getScrollPosition');\n/**\n * On `cut` events, native behavior is allowed to occur so that the system\n * clipboard is set properly. This means that we need to take steps to recover\n * the editor DOM state after the `cut` has occurred in order to maintain\n * control of the component.\n *\n * In addition, we can keep a copy of the removed fragment, including all\n * styles and entities, for use as an internal paste.\n */\n\n\nfunction editOnCut(editor, e) {\n  var editorState = editor._latestEditorState;\n  var selection = editorState.getSelection(); // No selection, so there's nothing to cut.\n\n  if (selection.isCollapsed()) {\n    e.preventDefault();\n    return;\n  } // Track the current scroll position so that it can be forced back in place\n  // after the editor regains control of the DOM.\n  // $FlowFixMe e.target should be an instanceof Node\n\n\n  var scrollParent = Style.getScrollParent(e.target);\n\n  var _getScrollPosition = getScrollPosition(scrollParent),\n      x = _getScrollPosition.x,\n      y = _getScrollPosition.y;\n\n  var fragment = getFragmentFromSelection(editorState);\n  editor.setClipboard(fragment); // Set `cut` mode to disable all event handling temporarily.\n\n  editor.setMode('cut'); // Let native `cut` behavior occur, then recover control.\n\n  setTimeout(function () {\n    editor.restoreEditorDOM({\n      x: x,\n      y: y\n    });\n    editor.exitCurrentMode();\n    editor.update(removeFragment(editorState));\n  }, 0);\n}\n\nfunction removeFragment(editorState) {\n  var newContent = DraftModifier.removeRange(editorState.getCurrentContent(), editorState.getSelection(), 'forward');\n  return EditorState.push(editorState, newContent, 'remove-range');\n}\n\nmodule.exports = editOnCut;","map":{"version":3,"sources":["/Users/zhengjie/Documents/Fulltime/nba_app/node_modules/draft-js/lib/editOnCut.js"],"names":["DraftModifier","require","EditorState","Style","getFragmentFromSelection","getScrollPosition","editOnCut","editor","e","editorState","_latestEditorState","selection","getSelection","isCollapsed","preventDefault","scrollParent","getScrollParent","target","_getScrollPosition","x","y","fragment","setClipboard","setMode","setTimeout","restoreEditorDOM","exitCurrentMode","update","removeFragment","newContent","removeRange","getCurrentContent","push","module","exports"],"mappings":"AAAA;;;;;;;;;;;AAYA;;AAEA,IAAIA,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA3B;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIG,wBAAwB,GAAGH,OAAO,CAAC,4BAAD,CAAtC;;AACA,IAAII,iBAAiB,GAAGJ,OAAO,CAAC,4BAAD,CAA/B;AAEA;;;;;;;;;;;AASA,SAASK,SAAT,CAAmBC,MAAnB,EAA2BC,CAA3B,EAA8B;AAC5B,MAAIC,WAAW,GAAGF,MAAM,CAACG,kBAAzB;AACA,MAAIC,SAAS,GAAGF,WAAW,CAACG,YAAZ,EAAhB,CAF4B,CAI5B;;AACA,MAAID,SAAS,CAACE,WAAV,EAAJ,EAA6B;AAC3BL,IAAAA,CAAC,CAACM,cAAF;AACA;AACD,GAR2B,CAU5B;AACA;AACA;;;AACA,MAAIC,YAAY,GAAGZ,KAAK,CAACa,eAAN,CAAsBR,CAAC,CAACS,MAAxB,CAAnB;;AAEA,MAAIC,kBAAkB,GAAGb,iBAAiB,CAACU,YAAD,CAA1C;AAAA,MACII,CAAC,GAAGD,kBAAkB,CAACC,CAD3B;AAAA,MAEIC,CAAC,GAAGF,kBAAkB,CAACE,CAF3B;;AAIA,MAAIC,QAAQ,GAAGjB,wBAAwB,CAACK,WAAD,CAAvC;AACAF,EAAAA,MAAM,CAACe,YAAP,CAAoBD,QAApB,EApB4B,CAsB5B;;AACAd,EAAAA,MAAM,CAACgB,OAAP,CAAe,KAAf,EAvB4B,CAyB5B;;AACAC,EAAAA,UAAU,CAAC,YAAY;AACrBjB,IAAAA,MAAM,CAACkB,gBAAP,CAAwB;AAAEN,MAAAA,CAAC,EAAEA,CAAL;AAAQC,MAAAA,CAAC,EAAEA;AAAX,KAAxB;AACAb,IAAAA,MAAM,CAACmB,eAAP;AACAnB,IAAAA,MAAM,CAACoB,MAAP,CAAcC,cAAc,CAACnB,WAAD,CAA5B;AACD,GAJS,EAIP,CAJO,CAAV;AAKD;;AAED,SAASmB,cAAT,CAAwBnB,WAAxB,EAAqC;AACnC,MAAIoB,UAAU,GAAG7B,aAAa,CAAC8B,WAAd,CAA0BrB,WAAW,CAACsB,iBAAZ,EAA1B,EAA2DtB,WAAW,CAACG,YAAZ,EAA3D,EAAuF,SAAvF,CAAjB;AACA,SAAOV,WAAW,CAAC8B,IAAZ,CAAiBvB,WAAjB,EAA8BoB,UAA9B,EAA0C,cAA1C,CAAP;AACD;;AAEDI,MAAM,CAACC,OAAP,GAAiB5B,SAAjB","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule editOnCut\n * \n */\n\n'use strict';\n\nvar DraftModifier = require('./DraftModifier');\nvar EditorState = require('./EditorState');\nvar Style = require('fbjs/lib/Style');\n\nvar getFragmentFromSelection = require('./getFragmentFromSelection');\nvar getScrollPosition = require('fbjs/lib/getScrollPosition');\n\n/**\n * On `cut` events, native behavior is allowed to occur so that the system\n * clipboard is set properly. This means that we need to take steps to recover\n * the editor DOM state after the `cut` has occurred in order to maintain\n * control of the component.\n *\n * In addition, we can keep a copy of the removed fragment, including all\n * styles and entities, for use as an internal paste.\n */\nfunction editOnCut(editor, e) {\n  var editorState = editor._latestEditorState;\n  var selection = editorState.getSelection();\n\n  // No selection, so there's nothing to cut.\n  if (selection.isCollapsed()) {\n    e.preventDefault();\n    return;\n  }\n\n  // Track the current scroll position so that it can be forced back in place\n  // after the editor regains control of the DOM.\n  // $FlowFixMe e.target should be an instanceof Node\n  var scrollParent = Style.getScrollParent(e.target);\n\n  var _getScrollPosition = getScrollPosition(scrollParent),\n      x = _getScrollPosition.x,\n      y = _getScrollPosition.y;\n\n  var fragment = getFragmentFromSelection(editorState);\n  editor.setClipboard(fragment);\n\n  // Set `cut` mode to disable all event handling temporarily.\n  editor.setMode('cut');\n\n  // Let native `cut` behavior occur, then recover control.\n  setTimeout(function () {\n    editor.restoreEditorDOM({ x: x, y: y });\n    editor.exitCurrentMode();\n    editor.update(removeFragment(editorState));\n  }, 0);\n}\n\nfunction removeFragment(editorState) {\n  var newContent = DraftModifier.removeRange(editorState.getCurrentContent(), editorState.getSelection(), 'forward');\n  return EditorState.push(editorState, newContent, 'remove-range');\n}\n\nmodule.exports = editOnCut;"]},"metadata":{},"sourceType":"script"}